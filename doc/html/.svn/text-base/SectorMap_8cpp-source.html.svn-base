<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>SectorMap.cpp Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3 -->
<center>
<a class="qindex" href="index.html">Main Page</a> &nbsp; <a class="qindex" href="modules.html">Modules</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; </center>
<hr><h1>SectorMap.cpp</h1><div class="fragment"><pre>00001 <span class="preprocessor">#include&lt;string&gt;</span>
00002 <span class="preprocessor">#include&lt;list&gt;</span>
00003 <span class="preprocessor">#include&lt;complex&gt;</span>
00004 <span class="preprocessor">#include&lt;vector&gt;</span>
00005 <span class="preprocessor">#include&lt;iostream&gt;</span>
00006 <span class="preprocessor">#include&lt;fstream&gt;</span>
00007 
00008 <span class="keyword">using</span> <span class="keyword">namespace </span>std;
00009 
00010 <span class="keyword">typedef</span> vector&lt;double&gt; vektor;
00011 
00012 <span class="preprocessor">#include "PhyConstants.h"</span>
00013 <span class="preprocessor">#include "SectorMap.h"</span>
00014 
<a name="l00020"></a><a class="code" href="classSectorMap.html#a2">00020</a> <a class="code" href="classSectorMap.html#a0">SectorMap::SectorMap</a>(<span class="keywordtype">double</span> sigx, <span class="keywordtype">double</span> sigy, <span class="keywordtype">double</span> R, <span class="keywordtype">double</span> length, <span class="keywordtype">double</span> gamma0)
00021 {
00022  ElementName=<span class="stringliteral">"CF"</span>;
00023  L=length;
00024  <span class="keywordtype">double</span> beta0=sqrt((gamma0*gamma0-1.0)/(gamma0*gamma0));
00025  <span class="keywordtype">double</span> eta0=pow(R*sigx/length,2)-1.0/pow(gamma0,2);
00026  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;36; j++) T[j]=0.0; 
00027  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;6; j++)  K[j]=0.0; 
00028  <a class="code" href="classSectorMap.html#a9">get_T</a>(0,0)=cos(sigx);
00029  <a class="code" href="classSectorMap.html#a9">get_T</a>(0,1)=length/sigx*sin(sigx);
00030  <span class="keywordflow">if</span> (R&gt;0.0)
00031   <a class="code" href="classSectorMap.html#a9">get_T</a>(0,5)=length*length/(sigx*sigx*R)*(1.0-cos(sigx))/beta0;
00032  <span class="keywordflow">else</span>
00033   <a class="code" href="classSectorMap.html#a9">get_T</a>(0,5)=0.0; 
00034  <a class="code" href="classSectorMap.html#a9">get_T</a>(1,0)=-sigx/length*sin(sigx);
00035  <a class="code" href="classSectorMap.html#a9">get_T</a>(1,1)=cos(sigx);
00036  <span class="keywordflow">if</span> (R&gt;0.0)
00037   <a class="code" href="classSectorMap.html#a9">get_T</a>(1,5)=length/(sigx*R)*sin(sigx)/beta0;
00038  <span class="keywordflow">else</span>
00039   <a class="code" href="classSectorMap.html#a9">get_T</a>(1,5)=0.0;
00040  <a class="code" href="classSectorMap.html#a9">get_T</a>(2,2)=cos(sigy);
00041  <a class="code" href="classSectorMap.html#a9">get_T</a>(2,3)=length/sigy*sin(sigy);
00042  <a class="code" href="classSectorMap.html#a9">get_T</a>(3,2)=-sigy/length*sin(sigy);
00043  <a class="code" href="classSectorMap.html#a9">get_T</a>(3,3)=cos(sigy);
00044  <a class="code" href="classSectorMap.html#a9">get_T</a>(4,4)=1.0;
00045  <a class="code" href="classSectorMap.html#a9">get_T</a>(4,5)=-eta0*length/(beta0*beta0);
00046  <a class="code" href="classSectorMap.html#a9">get_T</a>(5,5)=1.0;
00047  twiss.<a class="code" href="structTwissP.html#m0">betx</a>=length/sigx;
00048  twiss.<a class="code" href="structTwissP.html#m1">bety</a>=length/sigy;
00049  twiss.<a class="code" href="structTwissP.html#m2">alpx</a>=0.0;
00050  twiss.<a class="code" href="structTwissP.html#m3">alpy</a>=0.0;
00051  <span class="keywordflow">if</span>( R &gt; 0.0)
00052   twiss.<a class="code" href="structTwissP.html#m4">Dx</a>=pow(length/sigx,2)/R;
00053  <span class="keywordflow">else</span>
00054   twiss.<a class="code" href="structTwissP.html#m4">Dx</a>=0.0; 
00055 }
00056 
00057         
00058 
00059 <a class="code" href="classSectorMap.html">SectorMap</a>&amp; SectorMap::operator=(<span class="keyword">const</span> <a class="code" href="classSectorMap.html">SectorMap</a>&amp; M)
00060 {
00061   <span class="keywordflow">if</span>( <span class="keyword">this</span> != &amp;M )
00062     {
00063      ElementName=M.<a class="code" href="classSectorMap.html#o0">ElementName</a>;  
00064      L=M.<a class="code" href="classSectorMap.html#o1">L</a>;
00065      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;36; j++) T[j]=M.<a class="code" href="classSectorMap.html#o2">T</a>[j];
00066      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;6; j++)  K[j]=M.<a class="code" href="classSectorMap.html#o3">K</a>[j];
00067      twiss=M.<a class="code" href="classSectorMap.html#o4">twiss</a>; 
00068     }     
00069   <span class="keywordflow">return</span> *<span class="keyword">this</span>;
00070 }
00071             
00072 
<a name="l00073"></a><a class="code" href="classSectorMap.html#a5">00073</a> <a class="code" href="classSectorMap.html">SectorMap</a> <a class="code" href="classSectorMap.html#a5">SectorMap::operator*</a>(<span class="keyword">const</span> <a class="code" href="classSectorMap.html">SectorMap</a>&amp; M)
00074 {
00075  <a class="code" href="classSectorMap.html">SectorMap</a> tmap;
00076  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;6; i++)
00077           <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;6; j++)
00078                   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;6; l++)
00079                     tmap.<a class="code" href="classSectorMap.html#o2">T</a>[j*6+i]+=T[j*6+l]*M.<a class="code" href="classSectorMap.html#o2">T</a>[l*6+i];
00080  tmap.<a class="code" href="classSectorMap.html#o1">L</a>=L+M.<a class="code" href="classSectorMap.html#o1">L</a>;
00081  <span class="keywordflow">return</span> tmap;
00082 }
00083 
00084 
<a name="l00091"></a><a class="code" href="classSectorMap.html#a15">00091</a> <span class="keywordtype">void</span> <a class="code" href="classSectorMap.html#a15">SectorMap::transport</a>(vektor&amp; R1, vektor&amp; R0)
00092 {
00093  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0;j&lt;6;j++)
00094    {
00095     R1[j]=0.0;
00096     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0;l&lt;6;l++)
00097      R1[j]+=T[j*6+l]*R0[l];             
00098    }
00099 }
00100 
00101 
<a name="l00107"></a><a class="code" href="classSectorMap.html#a14">00107</a> <span class="keywordtype">void</span> <a class="code" href="classSectorMap.html#a14">SectorMap::phase_advance</a>(<span class="keywordtype">double</span>&amp; sigx, <span class="keywordtype">double</span>&amp; sigy)
00108 {
00109  <span class="keywordtype">double</span> ah=<a class="code" href="classSectorMap.html#a9">get_T</a>(0,0);
00110  <span class="keywordtype">double</span> dh=<a class="code" href="classSectorMap.html#a9">get_T</a>(1,1); 
00111  <span class="keywordtype">double</span> av=<a class="code" href="classSectorMap.html#a9">get_T</a>(2,2);  
00112  <span class="keywordtype">double</span> dv=<a class="code" href="classSectorMap.html#a9">get_T</a>(3,3);
00113  sigx=acos(0.5*(ah+dh));
00114  sigy=acos(0.5*(av+dv));
00115 }
00116 
00117 
<a name="l00123"></a><a class="code" href="classBeamLine.html#a1">00123</a> <a class="code" href="classBeamLine.html#a1">BeamLine::BeamLine</a>(string dir)
00124 {
00125   <a class="code" href="classBeamLine.html#a6">read_madx_twiss</a>(dir + <span class="stringliteral">"/twiss"</span>);
00126   <a class="code" href="classBeamLine.html#a7">read_madx_sectormap</a>(dir + <span class="stringliteral">"/sectormap"</span>);
00127   element=line.begin();
00128 }
00129 
00130 <span class="keywordtype">void</span> BeamLine::init(string dir)
00131 {
00132  <a class="code" href="classBeamLine.html#a6">read_madx_twiss</a>(dir + <span class="stringliteral">"/twiss"</span>);
00133  <a class="code" href="classBeamLine.html#a7">read_madx_sectormap</a>(dir + <span class="stringliteral">"/sectormap"</span>);
00134  element=line.begin();          
00135 }
00136 
00137 
<a name="l00143"></a><a class="code" href="classBeamLine.html#a6">00143</a> <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a6">BeamLine::read_madx_twiss</a>(string fname)
00144 {
00145   <span class="keywordtype">char</span> charline[200];
00146   string str;
00147   <a class="code" href="classSectorMap.html">SectorMap</a> SMap;
00148   <span class="keywordtype">double</span> s,l;
00149   <a class="code" href="structTwissP.html">TwissP</a> tw; 
00150 
00151   ifstream twissfile(fname.c_str());
00152 
00153   <span class="keywordflow">do</span> {
00154   twissfile.getline(charline,200);
00155   str=charline;
00156   } <span class="keywordflow">while</span>( str.find(<span class="stringliteral">"$START"</span>) == -1 );
00157 
00158   <span class="keywordflow">do</span> {
00159     twissfile &gt;&gt; SMap.<a class="code" href="classSectorMap.html#a6">get_name</a>() &gt;&gt; s &gt;&gt; SMap.<a class="code" href="classSectorMap.html#a7">get_L</a>() &gt;&gt; 
00160                 tw.<a class="code" href="structTwissP.html#m2">alpx</a> &gt;&gt; tw.<a class="code" href="structTwissP.html#m3">alpy</a> &gt;&gt; tw.<a class="code" href="structTwissP.html#m0">betx</a> &gt;&gt; tw.<a class="code" href="structTwissP.html#m1">bety</a> &gt;&gt; tw.<a class="code" href="structTwissP.html#m4">Dx</a>; 
00161     SMap.<a class="code" href="classSectorMap.html#a10">get_twiss</a>()=tw;
00162     line.push_back(SMap);
00163     <span class="comment">//cout &lt;&lt;   SMap.get_name() &lt;&lt; endl;</span>
00164   } <span class="keywordflow">while</span>( SMap.<a class="code" href="classSectorMap.html#a6">get_name</a>().find(<span class="stringliteral">"$END"</span>)== -1 ); 
00165 
00166   line.pop_back();
00167 
00168   twissfile.close();
00169 
00170 }
00171 
00172 
<a name="l00178"></a><a class="code" href="classBeamLine.html#a7">00178</a> <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a7">BeamLine::read_madx_sectormap</a>(string fname)
00179 {
00180   <span class="keywordtype">int</span> j,l,u;
00181   list&lt;SectorMap&gt;::iterator pos=line.begin();
00182   <span class="keywordtype">double</span> ddummy;
00183   string sdummy;  
00184 
00185   ifstream mapfile(fname.c_str());
00186   
00187   mapfile &gt;&gt; ddummy &gt;&gt; sdummy;
00188   <span class="keywordflow">for</span>(l = 0; l &lt; 43; l++)
00189    <span class="keywordflow">for</span>(j = 0; j &lt; 6 ; j++)  
00190     mapfile &gt;&gt; ddummy;
00191 
00192   <span class="keywordflow">for</span>(u=0; u &lt; line.size(); u++)   
00193     {
00194      mapfile &gt;&gt; ddummy &gt;&gt; sdummy;
00195      <span class="keywordflow">for</span>(j = 0; j &lt; 6; j++)
00196        mapfile &gt;&gt; pos-&gt;get_K(j); 
00197      <span class="keywordflow">for</span>(l = 0; l &lt; 6; l++) 
00198        <span class="keywordflow">for</span>(j = 0; j &lt; 6; j++)
00199           mapfile &gt;&gt; pos-&gt;get_T(j,l);
00200 
00201      <span class="comment">//for(l = 0; l &lt; 6; l++){ </span>
00202      <span class="comment">//  for(j = 0; j &lt; 6; j++)</span>
00203      <span class="comment">// cout &lt;&lt; pos-&gt;get_T(l,j) &lt;&lt; " ";</span>
00204      <span class="comment">// cout &lt;&lt; endl; }</span>
00205      <span class="comment">// cout &lt;&lt; endl;</span>
00206 
00207      <span class="keywordflow">for</span>(l = 0; l &lt; 36; l++)
00208       <span class="keywordflow">for</span>(j = 0; j &lt; 6 ; j++)  
00209         mapfile &gt;&gt; ddummy;
00210 
00211      pos++; 
00212 
00213     }
00214   
00215   mapfile.close();
00216   
00217 }
00218 
00219 
00220 <span class="keywordtype">double</span> BeamLine::get_L() 
00221 { 
00222   <span class="keywordtype">double</span> tem=0.0;
00223   list&lt;SectorMap&gt;::iterator tpos=line.begin();
00224   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt; line.size(); j++)
00225     {
00226       tem+=tpos-&gt;get_L();
00227       tpos++;
00228     }
00229   <span class="keywordflow">return</span> tem;
00230 }    
00231         
00232 
00233 <span class="keywordtype">void</span> BeamLine::next_element() 
00234 { 
00235   <span class="keywordflow">if</span>(element != line.end())
00236    element++; 
00237   <span class="keywordflow">if</span>(element == line.end())
00238    element=line.begin();
00239 }
00240 
00241 
00242 <span class="keywordtype">void</span>  BeamLine::set_element(<span class="keywordtype">int</span> j)
00243 {
00244  <span class="keywordflow">if</span> (j &lt; 0 || j &gt;= line.size() )  
00245     { cout &lt;&lt; <span class="stringliteral">"BeamLine::set_element: Error !"</span> &lt;&lt; endl; exit(0); }
00246  element=line.begin();
00247  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;j; i++)
00248          next_element();
00249 }
00250 
00251 
00259 <span class="comment">/*</span>
00260 <span class="comment">SectorMap BeamLine::submap(int start, int end)</span>
00261 <span class="comment">{</span>
00262 <span class="comment"> set_element(start);</span>
00263 <span class="comment"> SectorMap tmap(*element);</span>
00264 <span class="comment"> SectorMap tmap2;</span>
00265 <span class="comment"> next_element();</span>
00266 <span class="comment"> for(int u=start+1; u &lt; end; u++)   </span>
00267 <span class="comment">    {</span>
00268 <span class="comment">     tmap2=element-&gt;operator*(tmap);</span>
00269 <span class="comment">     tmap=tmap2;</span>
00270 <span class="comment">     if ( u == end-1 ) tmap.get_twiss()=element-&gt;get_twiss();</span>
00271 <span class="comment">     next_element();</span>
00272 <span class="comment">    }</span>
00273 <span class="comment"> return tmap;</span>
00274 <span class="comment">}</span>
00275 <span class="comment">*/</span>
00276 
<a name="l00282"></a><a class="code" href="classBeamLine.html#a18">00282</a> <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a18">BeamLine::phase_advance</a>(<span class="keywordtype">double</span>&amp; sigx, <span class="keywordtype">double</span>&amp; sigy) 
00283 {
00284  list&lt;SectorMap&gt;::iterator pos = line.begin();
00285  <a class="code" href="classSectorMap.html">SectorMap</a> tmap(*pos-&gt;get_map());
00286  <a class="code" href="classSectorMap.html">SectorMap</a> tmap2;
00287  pos++;
00288  list&lt;SectorMap&gt;::iterator pos0 = pos;
00289  <span class="keywordflow">for</span> (pos = pos0; pos != line.end(); pos++)
00290        {
00291          tmap2=pos-&gt;operator*(tmap);
00292          tmap=tmap2;
00293         }        
00294  sigx=acos(0.5*(tmap.<a class="code" href="classSectorMap.html#a9">get_T</a>(0,0)+tmap.<a class="code" href="classSectorMap.html#a9">get_T</a>(1,1)));
00295  sigy=acos(0.5*(tmap.<a class="code" href="classSectorMap.html#a9">get_T</a>(2,2)+tmap.<a class="code" href="classSectorMap.html#a9">get_T</a>(3,3)));
00296  
00297 }
00298 
00299 <span class="keywordtype">void</span> Octupole::kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds)
00300 {
00301    R1[0]=R0[0];
00302    R1[1]=R0[1]+1.0/6.0*strength_h*ds*(pow(R0[0],3)-0.0*3.0*R0[0]*pow(R0[2],2));
00303    R1[2]=R0[2];
00304    R1[3]=R0[3]-1.0/6.0*strength_h*ds*(0.0*3.0*R0[2]*pow(R0[0],2)-pow(R0[2],3));
00305    R1[4]=R0[4];
00306    R1[5]=R0[5];
00307 }
00308 
00309 
00310 Chrom::Chrom(<span class="keywordtype">double</span> tunex0, <span class="keywordtype">double</span> tuney0, <span class="keywordtype">double</span> R)
00311 {
00312  chrom_x=pow(tunex0/R,2);
00313  chrom_y=pow(tuney0/R,2);
00314 }
00315 
00316 
00317 <span class="keywordtype">void</span> Chrom::kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds)
00318 {
00319  R1[0]=R0[0];
00320  R1[1]=R0[1]-chrom_x*ds*R0[5]*R0[0];
00321  R1[2]=R0[2];
00322  R1[3]=R0[3]-chrom_y*ds*R0[5]*R0[2];
00323  R1[4]=R0[4];
00324  R1[5]=R0[5];    
00325 }
00326 
00327 
00328 TuneShift::TuneShift(<span class="keywordtype">double</span> tunex0, <span class="keywordtype">double</span> tuney0, <span class="keywordtype">double</span> dtunex, <span class="keywordtype">double</span> dtuney, <span class="keywordtype">double</span> R) 
00329   { 
00330     coeffx=2.0*tunex0*dtunex/pow(R,2);
00331     coeffy=2.0*tuney0*dtuney/pow(R,2);
00332   }
00333 
00334   
00335 <span class="keywordtype">void</span> TuneShift::kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds)
00336 {
00337  R1[0]=R0[0];
00338  R1[1]=R0[1]+coeffx*ds*R0[0];
00339  R1[2]=R0[2];
00340  R1[3]=R0[3]+coeffy*ds*R0[2];
00341  R1[4]=R0[4];
00342  R1[5]=R0[5];    
00343 }
00344   
00345 AmplitudeDetuning::AmplitudeDetuning(<span class="keywordtype">double</span> tunex0, <span class="keywordtype">double</span> tuney0,<span class="keywordtype">double</span>
00346 Qxs, <span class="keywordtype">double</span> Qys, <span class="keywordtype">double</span> R, <a class="code" href="classSectorMap.html">SectorMap</a>&amp; M)
00347 {
00348         SMap=M;
00349         coeffx=tunex0*Qxs/pow(R,2);  <span class="comment">// 2.0 removed</span>
00350         coeffy=tuney0*Qys/pow(R,2);  <span class="comment">// 2.0 removed     </span>
00351 }
00352 
00353 <span class="keywordtype">void</span> AmplitudeDetuning::kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds)
00354 {
00355         
00356  emitx=1.0/SMap.get_betx()*(pow(R0[0],2)+pow(SMap.get_betx()*R0[1],2)) ;        
00357  emity=1.0/SMap.get_bety()*(pow(R0[2],2)+pow(SMap.get_bety()*R0[3],2)) ;        
00358 
00359  R1[0]=R0[0];
00360  R1[1]=R0[1]+coeffx*ds*emitx*R0[0];
00361  R1[2]=R0[2];
00362  R1[3]=R0[3]+coeffy*ds*emity*R0[2];
00363  R1[4]=R0[4];
00364  R1[5]=R0[5];   
00365 }
00366 
00367 
00368 
</pre></div><hr><address style="align: right;"><small>Generated on Wed Oct 14 14:27:07 2009 for Track by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.3 </small></address>
</body>
</html>

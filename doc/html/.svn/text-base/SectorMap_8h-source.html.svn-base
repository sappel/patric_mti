<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>SectorMap.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3 -->
<center>
<a class="qindex" href="index.html">Main Page</a> &nbsp; <a class="qindex" href="modules.html">Modules</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; </center>
<hr><h1>SectorMap.h</h1><div class="fragment"><pre>00001 
00002 
<a name="l00003"></a><a class="code" href="structTwissP.html">00003</a> <span class="keyword">struct </span><a class="code" href="structTwissP.html">TwissP</a> {
00004 
<a name="l00005"></a><a class="code" href="structTwissP.html#m4">00005</a>   <span class="keywordtype">double</span> betx, bety, alpx, alpy, <a class="code" href="structTwissP.html#m4">Dx</a>; 
00006 
00007 };
00008 
00010 
<a name="l00011"></a><a class="code" href="classSectorMap.html">00011</a> <span class="keyword">class </span><a class="code" href="classSectorMap.html">SectorMap</a> {
00012 
00013  string ElementName;    
00014  <span class="keywordtype">double</span> L;              
00015  <span class="keywordtype">double</span> T[36];          
00016  <span class="keywordtype">double</span> K[6];           
00017  <a class="code" href="structTwissP.html">TwissP</a> twiss;          
00018 
00019 <span class="keyword">public</span>:
00020 
<a name="l00022"></a><a class="code" href="classSectorMap.html#a0">00022</a>  <a class="code" href="classSectorMap.html#a0">SectorMap</a>() { L=0.0; <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;36; j++) T[j]=0.0; 
00023                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;6; j++) K[j]=0.0; }
<a name="l00025"></a><a class="code" href="classSectorMap.html#a1">00025</a>  <a class="code" href="classSectorMap.html#a0">SectorMap</a>(<span class="keyword">const</span> <a class="code" href="classSectorMap.html">SectorMap</a>&amp; S) {
00026    ElementName=S.<a class="code" href="classSectorMap.html#o0">ElementName</a>;    
00027    L=S.<a class="code" href="classSectorMap.html#o1">L</a>;
00028    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;36; j++) T[j]=S.<a class="code" href="classSectorMap.html#o2">T</a>[j];
00029    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;6; j++)  K[j]=S.<a class="code" href="classSectorMap.html#o3">K</a>[j];
00030    twiss=S.<a class="code" href="classSectorMap.html#o4">twiss</a>; }  
00032  <a class="code" href="classSectorMap.html#a0">SectorMap</a>(<span class="keywordtype">double</span> sigx, <span class="keywordtype">double</span> sigy, <span class="keywordtype">double</span> R, <span class="keywordtype">double</span> length, <span class="keywordtype">double</span> gamma0);  
00033  ~<a class="code" href="classSectorMap.html">SectorMap</a>() {}
00034 
00035  <a class="code" href="classSectorMap.html">SectorMap</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classSectorMap.html">SectorMap</a>&amp; M);
00037  <a class="code" href="classSectorMap.html">SectorMap</a> <a class="code" href="classSectorMap.html#a5">operator*</a>(<span class="keyword">const</span> <a class="code" href="classSectorMap.html">SectorMap</a>&amp; M);
<a name="l00039"></a><a class="code" href="classSectorMap.html#a6">00039</a>  string&amp; <a class="code" href="classSectorMap.html#a6">get_name</a>() { <span class="keywordflow">return</span> ElementName; }
<a name="l00041"></a><a class="code" href="classSectorMap.html#a7">00041</a>  <span class="keywordtype">double</span>&amp; <a class="code" href="classSectorMap.html#a7">get_L</a>() { <span class="keywordflow">return</span> L; }
00042  <span class="keywordtype">double</span>&amp; get_K(<span class="keywordtype">int</span> j) { <span class="keywordflow">return</span> K[j]; }
<a name="l00044"></a><a class="code" href="classSectorMap.html#a9">00044</a>  <span class="keywordtype">double</span>&amp; <a class="code" href="classSectorMap.html#a9">get_T</a>(<span class="keywordtype">int</span> j, <span class="keywordtype">int</span> i) { <span class="keywordflow">return</span> T[j*6+i]; }
00045  <a class="code" href="structTwissP.html">TwissP</a>&amp; get_twiss() { <span class="keywordflow">return</span> twiss; }
00046  <span class="keywordtype">double</span> get_betx() { <span class="keywordflow">return</span> twiss.<a class="code" href="structTwissP.html#m0">betx</a>; }
00047  <span class="keywordtype">double</span> get_bety() { <span class="keywordflow">return</span> twiss.<a class="code" href="structTwissP.html#m1">bety</a>; }
<a name="l00049"></a><a class="code" href="classSectorMap.html#a13">00049</a>  <a class="code" href="classSectorMap.html">SectorMap</a>* <a class="code" href="classSectorMap.html#a13">get_map</a>() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }
00051  <span class="keywordtype">void</span> <a class="code" href="classSectorMap.html#a14">phase_advance</a>(<span class="keywordtype">double</span>&amp; sigx, <span class="keywordtype">double</span>&amp; sigy);
00053  <span class="keywordtype">void</span> <a class="code" href="classSectorMap.html#a15">transport</a>(vektor&amp; R1, vektor&amp; R0);
00054 };
00055 
00057 
<a name="l00058"></a><a class="code" href="classBeamLine.html">00058</a> <span class="keyword">class </span><a class="code" href="classBeamLine.html">BeamLine</a> {
00059 
00060   list&lt;SectorMap&gt; line;
00061   list&lt;SectorMap&gt;::iterator element;
00062 
00063  <span class="keyword">public</span>:
00064 
00065   <a class="code" href="classBeamLine.html#a1">BeamLine</a>() {};
00066   <a class="code" href="classBeamLine.html#a1">BeamLine</a>(string dir); 
00067   <a class="code" href="classBeamLine.html#a1">BeamLine</a>(<span class="keyword">const</span> <a class="code" href="classBeamLine.html">BeamLine</a>&amp; B) { line=B.<a class="code" href="classBeamLine.html#o0">line</a>; element=B.<a class="code" href="classBeamLine.html#o1">element</a>; }
00068   ~<a class="code" href="classBeamLine.html">BeamLine</a>() {}
00069 
00070   <span class="keywordtype">void</span> init(<a class="code" href="classBeamLine.html">BeamLine</a>&amp; B) { line=B.<a class="code" href="classBeamLine.html#o0">line</a>; element=B.<a class="code" href="classBeamLine.html#o1">element</a>; }
00071   <span class="keywordtype">void</span> init(string dir);
00072   <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a6">read_madx_twiss</a>(string fname); 
00073   <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a7">read_madx_sectormap</a>(string fname); 
00074   <span class="keywordtype">int</span> get_size() { <span class="keywordflow">return</span> line.size(); }   
00075   <span class="keywordtype">double</span> get_L(); 
00076   list&lt;SectorMap&gt;::iterator get_element() { <span class="keywordflow">return</span> element; }  
00077   list&lt;SectorMap&gt;::iterator get_first_element() { <span class="keywordflow">return</span> line.begin(); }  
00078   list&lt;SectorMap&gt;::iterator get_end_element() { <span class="keywordflow">return</span> line.end(); } 
00079   <span class="keywordtype">void</span> next_element();
00080   <span class="keywordtype">void</span> first_element() { element=line.begin(); }
00081   <span class="keywordtype">void</span> last_element()  { element=line.end();element--; }
00082   <span class="keywordtype">void</span> set_element(<span class="keywordtype">int</span> j); 
<a name="l00083"></a><a class="code" href="classBeamLine.html#a17">00083</a>   <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a17">add_map</a>(<a class="code" href="classSectorMap.html">SectorMap</a>&amp; M) { line.push_back(M); } 
00084   
00085   <span class="comment">//SectorMap submap(int start, int end); //!&lt; multiply sector maps </span>
00086   <span class="keywordtype">void</span> <a class="code" href="classBeamLine.html#a18">phase_advance</a>(<span class="keywordtype">double</span>&amp; sigx, <span class="keywordtype">double</span>&amp; sigy); 
00087 }; 
00088 
00089 
00091 
00092 
<a name="l00093"></a><a class="code" href="classThinLens.html">00093</a> <span class="keyword">class </span><a class="code" href="classThinLens.html">ThinLens</a> {
00094   
00095 <span class="keyword">public</span>: 
00096   <span class="keyword">virtual</span> <span class="keywordtype">void</span> kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds) = 0;
00097   
00098 };      
00099 
00100 <span class="keyword">class </span>Octupole : <span class="keyword">public</span> <a class="code" href="classThinLens.html">ThinLens</a> {
00101     
00102   <span class="keywordtype">double</span> strength_h;    
00103         
00104 <span class="keyword">public</span>:
00105   Octupole(<span class="keywordtype">double</span> strength) { strength_h=strength; } 
00106   <span class="keywordtype">void</span> kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds); 
00107 
00108 };
00109 
00110 
00111 <span class="keyword">class </span>Chrom : <span class="keyword">public</span> <a class="code" href="classThinLens.html">ThinLens</a> {
00112   
00113   <span class="keywordtype">double</span> chrom_x, chrom_y;      
00114   
00115   <span class="keyword">public</span>: 
00116   Chrom(<span class="keywordtype">double</span> tunex0, <span class="keywordtype">double</span> tuney0, <span class="keywordtype">double</span> R);
00117   <span class="keywordtype">void</span> kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds); 
00118   
00119 };
00120 
00121 
00122 <span class="keyword">class </span>TuneShift : <span class="keyword">public</span> <a class="code" href="classThinLens.html">ThinLens</a> {
00123         
00124   <span class="keywordtype">double</span> coeffx, coeffy;        
00125   
00126   <span class="keyword">public</span>: 
00127   TuneShift(<span class="keywordtype">double</span> tunex0, <span class="keywordtype">double</span> tuney0, <span class="keywordtype">double</span> dtunex, <span class="keywordtype">double</span> dtuney, <span class="keywordtype">double</span> R); 
00128   <span class="keywordtype">void</span> kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds); 
00129  
00130 };      
00131 
00132 
00133 <span class="keyword">class </span>AmplitudeDetuning : <span class="keyword">public</span> <a class="code" href="classThinLens.html">ThinLens</a> {
00134  
00135   <span class="keywordtype">double</span> emitx, emity, coeffx, coeffy;
00136   <a class="code" href="classSectorMap.html">SectorMap</a> SMap;
00137 
00138   <span class="keyword">public</span>:
00139   AmplitudeDetuning(<span class="keywordtype">double</span> tunex0, <span class="keywordtype">double</span> tuney0, <span class="keywordtype">double</span> Qxs, <span class="keywordtype">double</span> Qys, <span class="keywordtype">double</span> R, <a class="code" href="classSectorMap.html">SectorMap</a>&amp; M);
00140   <span class="keywordtype">void</span> kick(vektor&amp; R1, vektor&amp; R0, <span class="keywordtype">double</span> ds); 
00141    
00142 };      
00143 
00144 
00145 
00146 
00147 
00148 
00149 
</pre></div><hr><address style="align: right;"><small>Generated on Wed Oct 14 14:27:07 2009 for Track by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.3 </small></address>
</body>
</html>

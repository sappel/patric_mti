<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Track: Main.old.cpp Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.2 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="modules.html">Modules</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a></div>
<div class="nav">
<a class="el" href="dir_000001.html">src</a></div>
<h1>Main.old.cpp</h1><div class="fragment"><pre class="fragment">00001 
00005 <span class="preprocessor">#include "mpi.h"</span>
00006 <span class="preprocessor">#include "mylib.h"</span>
00007 <span class="preprocessor">#include "SectorMap.h"</span>
00008 <span class="preprocessor">#include "Pic.h"</span>
00009 
00010 <span class="comment">//-------- Input variables:---------------------</span>
00011 
00012 <span class="comment">// Particles and Grid</span>
00013 
00014 <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#ga0">NPIC</a>; 
00015 <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#ga1">NX</a>;   
00016 <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#ga2">NY</a>;
00017 <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#ga3">NZ</a>;
00018 
00019 <span class="comment">// lattice/ring:</span>
00020 
00021 <span class="keywordtype">float</span> <a class="code" href="group__Lattice.html#ga0">piperadius</a>;
00022 <span class="keywordtype">float</span> <a class="code" href="group__Lattice.html#ga1">circum</a>;
00023 <span class="keywordtype">float</span> <a class="code" href="group__Lattice.html#ga2">gamma_t</a>;
00024 <span class="keywordtype">int</span> Nelements;
00025 <span class="keywordtype">float</span> cell_length;
00026 
00027 <span class="comment">// output:</span>
00028 
00029 <span class="keywordtype">char</span> <a class="code" href="group__Simulation.html#ga0">ausgabe</a>[50];
00030 <span class="keywordtype">int</span> <a class="code" href="group__Simulation.html#ga1">pic_subset</a>;
00031 <span class="keywordtype">int</span> <a class="code" href="group__Simulation.html#ga2">cells</a>;
00032 
00033 <span class="comment">// beam parameters:</span>
00034 
00035 <span class="keywordtype">float</span> <a class="code" href="group__Beam.html#ga0">e_kin</a>;
00036 <span class="keywordtype">float</span> <a class="code" href="group__Beam.html#ga1">Z</a>;
00037 <span class="keywordtype">float</span> <a class="code" href="group__Beam.html#ga2">A</a>;
00038 <span class="keywordtype">float</span> <a class="code" href="group__Beam.html#ga3">current</a>;
00039 <span class="keywordtype">int</span> <a class="code" href="group__Beam.html#ga4">init_pic_xy</a>, <a class="code" href="group__Beam.html#ga5">init_pic_z</a>;
00040 <span class="keywordtype">float</span> <a class="code" href="group__Beam.html#ga6">momentum_spread</a>; 
00041 <span class="keywordtype">float</span> rms_emittance_x0,<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>;
00042 <span class="keywordtype">float</span> mismatch_x, <a class="code" href="group__Beam.html#ga10">mismatch_y</a>, centering=0.0;   <span class="comment">// centering: offset in x (should go into input file later)</span>
00043 <span class="keywordtype">float</span> initial_perturb=0.0;
00044 
00045 <span class="comment">//-------------------end input ---------------------------</span>
00046 
00047 <span class="comment">// loading input from cfg file:</span>
00048 
00049 <span class="keywordtype">void</span> input_from_file(string filename)
00050 {
00051  <span class="keywordtype">char</span> dummy_string[80] ;
00052   FILE  *cfg_file_ptr ;
00053   <span class="keywordtype">long</span>  i, condition ;
00054   string cfg_filename=filename + <span class="stringliteral">".cfg"</span>; 
00055 
00056   cfg_file_ptr = fopen (cfg_filename.c_str(),<span class="stringliteral">"r"</span>) ;
00057   <span class="keywordflow">if</span> (cfg_file_ptr == NULL)
00058      { printf (<span class="stringliteral">"\n\n    Configuration-file does not exist.\n"</span>); 
00059        exit(0); }
00060 
00061   <span class="keywordflow">for</span> (i=0 ; i&lt;=17 ; i++)
00062       { condition = fscanf (cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string) ;
00063         <span class="keywordflow">switch</span> (i)
00064                { <span class="keywordflow">case</span> 0  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#ga0">NPIC</a>) ;
00065                            break ;
00066                  <span class="keywordflow">case</span> 1  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#ga1">NX</a>) ;
00067                            break ;  
00068                  <span class="keywordflow">case</span> 2  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#ga2">NY</a>) ;
00069                            break ;
00070                  <span class="keywordflow">case</span> 3  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#ga3">NZ</a>) ;
00071                            break ;
00072                  <span class="keywordflow">case</span> 4  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Simulation.html#ga2">cells</a>);
00073                            break ;
00074                  <span class="keywordflow">case</span> 5  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga0">e_kin</a>);
00075                            break ;
00076                  <span class="keywordflow">case</span> 6  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga1">Z</a>);
00077                            break ;
00078                  <span class="keywordflow">case</span> 7  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga2">A</a>);
00079                            break ;
00080                  <span class="keywordflow">case</span> 8  : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga3">current</a>) ;
00081                            break ;
00082                  <span class="keywordflow">case</span> 9 :  condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Lattice.html#ga0">piperadius</a>);
00083                            break ;
00084                  <span class="keywordflow">case</span> 10 :  condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Lattice.html#ga1">circum</a>) ;
00085                            break ;
00086                  <span class="keywordflow">case</span> 11 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Lattice.html#ga2">gamma_t</a>) ;
00087                            break ;
00088                  <span class="keywordflow">case</span> 12 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Simulation.html#ga1">pic_subset</a>) ;
00089                            break ;
00090                  <span class="keywordflow">case</span> 13 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Beam.html#ga4">init_pic_xy</a>) ;
00091                            condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Beam.html#ga5">init_pic_z</a>) ;
00092                            break ;
00093                  <span class="keywordflow">case</span> 14 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga6">momentum_spread</a>);
00094                            break ;
00095                  <span class="keywordflow">case</span> 15 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;rms_emittance_x0) ;
00096                            condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>) ;
00097                            break ;        
00098                  <span class="keywordflow">case</span> 16 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;mismatch_x);
00099                            condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;<a class="code" href="group__Beam.html#ga10">mismatch_y</a>);
00100                            condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%f"</span>,&amp;centering);
00101                            break ;
00102                  <span class="keywordflow">case</span> 17 : condition = fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,<a class="code" href="group__Simulation.html#ga0">ausgabe</a>);
00103                            break ;  
00104                   }
00105 
00106         <span class="keywordflow">if</span> (condition == EOF)
00107            { printf (<span class="stringliteral">"\n\n    Invalid file-structure.\n"</span>) ;
00108            fclose (cfg_file_ptr) ; exit(0); } }
00109 
00110   fclose (cfg_file_ptr) ;
00111 
00112 }
00113 
00114 
00115 <span class="keywordtype">void</span> print_IDL(string data_dir, <span class="keywordtype">int</span> numprocs)
00116 {
00117  string idl_data=data_dir + <span class="stringliteral">"idl.dat"</span>;
00118  
00119  FILE *out=fopen(idl_data.c_str(),<span class="stringliteral">"w"</span>);
00120 
00121  fprintf(out,<span class="stringliteral">"%d\n"</span>,numprocs);
00122  fprintf(out,<span class="stringliteral">"%g\n"</span>,<a class="code" href="group__Beam.html#ga0">e_kin</a>);  
00123  fprintf(out,<span class="stringliteral">"%g\n"</span>,<a class="code" href="group__Beam.html#ga1">Z</a>); 
00124  fprintf(out,<span class="stringliteral">"%g\n"</span>,<a class="code" href="group__Beam.html#ga2">A</a>);  
00125  fprintf(out,<span class="stringliteral">"%g\n"</span>,<a class="code" href="group__Beam.html#ga3">current</a>);  
00126  fprintf(out,<span class="stringliteral">"%g\n"</span>,<a class="code" href="group__Lattice.html#ga1">circum</a>);
00127  fprintf(out,<span class="stringliteral">"%d\n"</span>,Nelements);
00128  fprintf(out,<span class="stringliteral">"%g\n"</span>,cell_length);  
00129  fprintf(out,<span class="stringliteral">"%d\n"</span>,<a class="code" href="group__Simulation.html#ga1">pic_subset</a>); 
00130  fprintf(out,<span class="stringliteral">"%g\n"</span>,<a class="code" href="group__Lattice.html#ga0">piperadius</a>);
00131  fprintf(out,<span class="stringliteral">"%d\n"</span>,<a class="code" href="group__Particles.html#ga1">NX</a>);
00132  fprintf(out,<span class="stringliteral">"%d\n"</span>,<a class="code" href="group__Particles.html#ga2">NY</a>); 
00133  fprintf(out,<span class="stringliteral">"%d\n"</span>,<a class="code" href="group__Particles.html#ga3">NZ</a>); 
00134  
00135  fflush(out);
00136  fclose(out);
00137 }
00138 
00139 
00141 
00142 main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
00143 {
00144 
00145  <span class="comment">// MPI:</span>
00146  
00147  <span class="keywordtype">int</span> numprocs, myid, namelen;
00148  <span class="keywordtype">char</span> processor_name[MPI_MAX_PROCESSOR_NAME];
00149 
00150  MPI_Init(&amp;argc,&amp;argv);
00151  MPI_Comm_size(MPI_COMM_WORLD,&amp;numprocs);
00152  MPI_Comm_rank(MPI_COMM_WORLD,&amp;myid); 
00153 
00154  MPI_Get_processor_name(processor_name,&amp;namelen);
00155  fprintf(stderr,<span class="stringliteral">"Process %d running on %s\n"</span>, myid, processor_name); 
00156 
00157  string numbers=<span class="stringliteral">"0123456789"</span>;   <span class="comment">// !!!!! np &lt;= 10</span>
00158  string myid_str(numbers,myid,1);
00159 
00160  MPI_Status status;
00161  MPI_Datatype particletype;
00162  MPI_Type_contiguous(18,MPI_DOUBLE,&amp;particletype); <span class="comment">// !!! 14-&gt;18 changed</span>
00163  MPI_Type_commit(&amp;particletype); 
00164 
00165 <span class="comment">// read input file:</span>
00166  
00167  <span class="keywordflow">if</span>(argv[1]==0) { printf(<span class="stringliteral">"No input file name !\n"</span>); exit(0); }
00168 
00169  input_from_file(argv[1]);
00170  
00171  <span class="comment">// Synchronous particle:</span>
00172 
00173  <a class="code" href="structSynParticle.html">SynParticle</a> SP;
00174  SP.<a class="code" href="structSynParticle.html#o0">Z</a>=<a class="code" href="group__Beam.html#ga1">Z</a>;
00175  SP.<a class="code" href="structSynParticle.html#o1">A</a>=<a class="code" href="group__Beam.html#ga2">A</a>;
00176  SP.<a class="code" href="structSynParticle.html#o3">gamma0</a> = 1.0 + (<a class="code" href="group__Beam.html#ga0">e_kin</a>*1e6*qe)/(mp*clight*clight) ;
00177  SP.<a class="code" href="structSynParticle.html#o2">beta0</a>  = sqrt((SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>*SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>-1.0)/(SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>*SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>)) ;
00178  SP.<a class="code" href="structSynParticle.html#o4">eta0</a> = 1.0/pow(<a class="code" href="group__Lattice.html#ga2">gamma_t</a>,2)-1.0/pow(SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>,2);
00179 
00180  <span class="comment">// Other variables:</span>
00181 
00182  string data_dir=<a class="code" href="group__Simulation.html#ga0">ausgabe</a>;
00183  data_dir=data_dir + <span class="stringliteral">"/"</span>; 
00184 
00185  <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#ga12">bunchfactor</a>=1.0; <span class="comment">//0.8;</span>
00186  <span class="keywordtype">double</span> dx=2.0*<a class="code" href="group__Lattice.html#ga0">piperadius</a>/(<a class="code" href="group__Particles.html#ga1">NX</a>-1.0); <span class="comment">// needed for Poisson solver and grids</span>
00187  <span class="keywordtype">double</span> dy=2.0*<a class="code" href="group__Lattice.html#ga0">piperadius</a>/(<a class="code" href="group__Particles.html#ga2">NY</a>-1.0); <span class="comment">// needed for Poisson solver and grids</span>
00188  <span class="keywordtype">double</span> dz=<a class="code" href="group__Lattice.html#ga1">circum</a>/<a class="code" href="group__Particles.html#ga3">NZ</a>;
00189  <span class="keywordtype">double</span> ds=0.2;  <span class="comment">// value needed here only for setting dxs, dys.  </span>
00190  <span class="keywordtype">double</span> dxs=4.0*(dx/ds)/(<a class="code" href="group__Particles.html#ga1">NX</a>-1.0);    <span class="comment">// only for plotting xs, not for tracking</span>
00191  <span class="keywordtype">double</span> dys=4.0*(dx/ds)/(<a class="code" href="group__Particles.html#ga1">NX</a>-1.0);    <span class="comment">// only for plotting ys, not for tracking</span>
00192  <span class="keywordtype">double</span> charge=<a class="code" href="group__Beam.html#ga3">current</a>*<a class="code" href="group__Lattice.html#ga1">circum</a>/(<a class="code" href="group__Particles.html#ga0">NPIC</a>*SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight*qe); <span class="comment">// macro-particle charge Q/e</span>
00193  <span class="keywordtype">double</span> zm=0.5*<a class="code" href="group__Lattice.html#ga1">circum</a>*bunchfactor; <span class="comment">// (initial) bunch length</span>
00194  <span class="keywordtype">double</span> zm1=-zm;   <span class="comment">// left bunch boundary</span>
00195  <span class="keywordtype">double</span> zm2=zm;    <span class="comment">// right bunch boundary</span>
00196  
00197  <span class="comment">// open output file:</span>
00198 
00199  string outfile= data_dir + <span class="stringliteral">"ppic.dat"</span>;
00200  FILE *out=fopen(outfile.c_str(),<span class="stringliteral">"w"</span>);
00201   
00202  <span class="comment">// init random number generator:</span>
00203 
00204  <span class="keywordtype">long</span> d=-1000*(myid+1);  <span class="comment">// transverse distribution: each slice needs a different initialization !</span>
00205  <span class="keywordtype">long</span> dl=-100;           <span class="comment">// longitudinal plane: same random set needed</span>
00206  <span class="keywordtype">long</span> dran=-101;         <span class="comment">// for BTF noise excitation: same random sets needed</span>
00207 
00208  <span class="comment">//-------Init Lattice-------</span>
00209 
00210  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga0">madx_input_file</a>=0;
00211  <a class="code" href="classBeamLine.html">BeamLine</a> lattice;
00212  
00213  <span class="comment">// constant focusing (CF):</span>
00214  <span class="keywordtype">int</span> <a class="code" href="group__Lattice.html#ga7">NCF</a>=32; 
00215  <span class="keywordtype">double</span> CF_advance_h=97.3*PI/180.0; <span class="comment">//  127.41*PI/180.0; //   126.9*PI/180.0;</span>
00216  <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#ga4">CF_advance_v</a>=97.3*PI/180.0; <span class="comment">//  127.41*PI/180.0; //   126.9*PI/180.0;  //  63.94*PI/180.0;</span>
00217  <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#ga5">CF_R</a>=0.0;  
00218  <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#ga6">CF_length</a>=18.0;  
00219  
00221  <a class="code" href="classSectorMap.html">SectorMap</a> CF(CF_advance_h/NCF,CF_advance_v/NCF,CF_R,CF_length/NCF,SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>);
00223  <a class="code" href="classBeamLine.html">BeamLine</a> CF_cell;
00224  <span class="keywordflow">for</span>( <span class="keywordtype">int</span> j=0; j&lt;NCF; j++)
00225    CF_cell.<a class="code" href="classBeamLine.html#a17">add_map</a>(CF);
00226 
00227  <span class="keywordflow">if</span> ( madx_input_file == 1 )
00228   lattice.<a class="code" href="classBeamLine.html#a4">init</a>(<span class="stringliteral">"../mad"</span>);  
00229  <span class="keywordflow">else</span> 
00230   lattice.<a class="code" href="classBeamLine.html#a4">init</a>(CF_cell);
00231  
00232  cell_length=lattice.<a class="code" href="classBeamLine.html#a9">get_L</a>();
00233  Nelements=lattice.<a class="code" href="classBeamLine.html#a8">get_size</a>();
00234  list&lt;SectorMap&gt;::iterator first_elem=lattice.<a class="code" href="classBeamLine.html#a11">get_first_element</a>();
00235  list&lt;SectorMap&gt;::iterator last_elem=lattice.<a class="code" href="classBeamLine.html#a12">get_end_element</a>();
00236  last_elem--; 
00237 
00238  <span class="comment">// machine tunes from lattice</span>
00239  <span class="keywordtype">double</span> tunex;  
00240  <span class="keywordtype">double</span> tuney;
00241  lattice.<a class="code" href="classBeamLine.html#a18">phase_advance</a>(tunex,tuney);
00242  
00243  <span class="keywordflow">if</span> (myid == 0) cout &lt;&lt; <span class="stringliteral">"advancex: "</span> &lt;&lt; tunex*180.0/PI &lt;&lt; endl;
00244  
00245  tunex=<a class="code" href="group__Lattice.html#ga1">circum</a>/cell_length*tunex/(2.0*PI); 
00246  tuney=<a class="code" href="group__Lattice.html#ga1">circum</a>/cell_length*tuney/(2.0*PI); 
00247  <span class="keywordflow">if</span> (myid == 0) cout &lt;&lt; <span class="stringliteral">"tunex0: "</span> &lt;&lt; tunex &lt;&lt; endl;     
00248  
00249  <span class="comment">// Chromatic correction kick:</span>
00250  Chrom Chrom0(tunex,tuney,<a class="code" href="group__Lattice.html#ga1">circum</a>/(2.0*PI)); 
00251  
00252  <span class="comment">// Octupole:</span>
00253  Octupole Oct0(8.0);
00254  
00255  <span class="comment">// Amplitude detuning</span>
00256  <span class="keywordtype">double</span> dqx_detune=0.04, <a class="code" href="group__Lattice.html#ga12">dqy_detune</a>=0.04;
00257  AmplitudeDetuning Amp0(tunex,tuney,dqx_detune/(4.0e-6*rms_emittance_x0),<a class="code" href="group__Lattice.html#ga12">dqy_detune</a>/(4.0e-6*<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>),<a class="code" href="group__Lattice.html#ga1">circum</a>/(2.0*PI),CF);
00258  
00259  <span class="comment">// set matched RF voltage:</span>
00260  
00261  <span class="keywordtype">double</span> V0rf=pow(<a class="code" href="group__Lattice.html#ga1">circum</a>,2)*mp*<a class="code" href="group__Beam.html#ga2">A</a>*SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>
00262             *pow(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight,2)*abs(SP.<a class="code" href="structSynParticle.html#o4">eta0</a>)*pow(<a class="code" href="group__Beam.html#ga6">momentum_spread</a>,2)
00263             /(2.0*PI*qe*<a class="code" href="group__Beam.html#ga1">Z</a>*pow(zm,2));
00264  
00265  <span class="comment">//V0rf=1.0e6; // !!!!!!!!!!!!      </span>
00266             
00267  <span class="keywordtype">double</span> fsyn=sqrt(fabs(SP.<a class="code" href="structSynParticle.html#o4">eta0</a>)*V0rf*qe*SP.<a class="code" href="structSynParticle.html#o0">Z</a>
00268                  /(2.0*PI*pow(<a class="code" href="group__Lattice.html#ga1">circum</a>,2)*mp*SP.<a class="code" href="structSynParticle.html#o1">A</a>*SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>));
00269                  
00270  <span class="keywordflow">if</span>(myid == 0) cout &lt;&lt; <span class="stringliteral">"Vrf [kV]: "</span> &lt;&lt; V0rf*1.0e-3 &lt;&lt; <span class="stringliteral">"  fsyn [kHz]: "</span> &lt;&lt; fsyn*1.0e-3 &lt;&lt; endl;           
00271             
00272  <span class="comment">//--------end lattice----------</span>
00273  
00274  
00275  <span class="comment">// print IDL parameter file:</span>
00276  
00277  <span class="keywordflow">if</span>( myid == 0 )
00278     print_IDL(data_dir,numprocs);
00279 
00280  <span class="comment">// Init 2D transverse grids:</span>
00281  
00282  Grid2D rho_xy(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dx,dy,data_dir + <span class="stringliteral">"rho_xy.dat"</span>); 
00283  Grid2D rho_xy_tmp(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dx,dy);
00284  Grid2D xxs(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga1">NX</a>,dx,dxs,data_dir + <span class="stringliteral">"xxs.dat"</span>); 
00285  Grid2D xxs_tmp(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga1">NX</a>,dx,dxs);
00286  Grid2D yys(<a class="code" href="group__Particles.html#ga2">NY</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dy,dys,data_dir + <span class="stringliteral">"yys.dat"</span>); 
00287  Grid2D yys_tmp(<a class="code" href="group__Particles.html#ga2">NY</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dy,dys); 
00288  Grid2D xsys(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dxs,dys,data_dir + <span class="stringliteral">"xsys.dat"</span>); 
00289  Grid2D xsys_tmp(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dxs,dys);
00290  Grid2D zx(<a class="code" href="group__Particles.html#ga3">NZ</a>,<a class="code" href="group__Particles.html#ga1">NX</a>,dz,dx,data_dir + <span class="stringliteral">"zx.dat"</span>); 
00291  Grid2D zx_tmp(<a class="code" href="group__Particles.html#ga3">NZ</a>,<a class="code" href="group__Particles.html#ga1">NX</a>,dz,dx);
00292  
00293  Grid2D Ex(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dx,dy,data_dir + <span class="stringliteral">"Ex.dat"</span>);
00294  Grid2D Ey(<a class="code" href="group__Particles.html#ga1">NX</a>,<a class="code" href="group__Particles.html#ga2">NY</a>,dx,dy,data_dir + <span class="stringliteral">"Ey.dat"</span>);
00295  
00296  <span class="comment">// Init particle distribution:</span>
00297 
00298  <a class="code" href="classPic.html">Pic</a> Pics(&amp;SP,charge,0,data_dir + <span class="stringliteral">"pics_"</span> + myid_str + <span class="stringliteral">".dat"</span>);
00299  Pics.z1=zm1+myid*(zm2-zm1)/numprocs;  <span class="comment">// left boundary in z for this slice</span>
00300  Pics.z2=Pics.z1+(zm2-zm1)/numprocs;   <span class="comment">// right boundary</span>
00301  <span class="keywordtype">double</span> slice_length=Pics.z2-Pics.z1;  
00302  
00303  <span class="comment">// Init longitudinal grids</span>
00304  
00305   Grid1D rho_z_tmp(<a class="code" href="group__Particles.html#ga3">NZ</a>,dz,-0.5*<a class="code" href="group__Lattice.html#ga1">circum</a>);
00306   Grid1D rho_z(<a class="code" href="group__Particles.html#ga3">NZ</a>,dz,-0.5*<a class="code" href="group__Lattice.html#ga1">circum</a>,data_dir + <span class="stringliteral">"rho_z.dat"</span>);
00307   Grid1D dipole_current_x_tmp(<a class="code" href="group__Particles.html#ga3">NZ</a>,dz,-0.5*<a class="code" href="group__Lattice.html#ga1">circum</a>);
00308   Grid1D dipole_current_x(<a class="code" href="group__Particles.html#ga3">NZ</a>,dz,-0.5*<a class="code" href="group__Lattice.html#ga1">circum</a>,data_dir + <span class="stringliteral">"dipole_x.dat"</span>);
00309   
00310  <span class="comment">// Init 3D sliced grids (for 3D space charge calculation)</span>
00311 
00312   <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#ga4">NZ_bunch</a>=<a class="code" href="group__Particles.html#ga3">NZ</a>/2;   <span class="comment">// !!!!!!!!!!!!!!!!</span>
00313   <span class="keywordflow">if</span> ( fmod((<span class="keywordtype">float</span>)NZ_bunch,(<span class="keywordtype">float</span>)numprocs) != 0.0) 
00314          { cout &lt;&lt; <span class="stringliteral">"NZ_bunch kein Vielfaches von numprocs"</span> &lt;&lt; endl; exit(0); }  
00315   Grid3D rho_xyz(NZ_bunch/numprocs,Pics.z1,Pics.z2,rho_xy);
00316   Grid3D Ey3(NZ_bunch/numprocs,Pics.z1,Pics.z2,rho_xy);
00317   Grid3D Ex3(NZ_bunch/numprocs,Pics.z1,Pics.z2,rho_xy);
00318   
00319   
00320  <span class="comment">// set longitudinal distribution:</span>
00321 
00322  <span class="keywordflow">switch</span>(<a class="code" href="group__Beam.html#ga5">init_pic_z</a>) {
00323  <span class="keywordflow">case</span> 0:   <span class="comment">//  coasting + Parabolic</span>
00324   Pics.coasting_beam(<a class="code" href="group__Particles.html#ga0">NPIC</a>,<a class="code" href="group__Lattice.html#ga1">circum</a>,&amp;dl);  
00325   Pics.parabolic(0.0,<a class="code" href="group__Lattice.html#ga1">circum</a>,sqrt(5.0)*<a class="code" href="group__Beam.html#ga6">momentum_spread</a>,<a class="code" href="group__Particles.html#ga0">NPIC</a>,&amp;dl);
00326   <span class="keywordflow">break</span>;
00327  <span class="keywordflow">case</span> 1:   <span class="comment">//  bunch + Parabolic</span>
00328   Pics.parabolic(0.0,2.0*zm,<a class="code" href="group__Beam.html#ga6">momentum_spread</a>,<a class="code" href="group__Particles.html#ga0">NPIC</a>,&amp;dl);
00329   <span class="keywordflow">break</span>;
00330  <span class="keywordflow">case</span> 2:   <span class="comment">//  coasting + Gauss</span>
00331   Pics.coasting_beam(<a class="code" href="group__Particles.html#ga0">NPIC</a>,bunchfactor*<a class="code" href="group__Lattice.html#ga1">circum</a>,&amp;dl);
00332   Pics.gaussz(<a class="code" href="group__Beam.html#ga6">momentum_spread</a>,&amp;d);  
00333   <span class="keywordflow">break</span>;  
00334  <span class="keywordflow">default</span>:
00335   printf(<span class="stringliteral">"Wrong PIC Initalization\n"</span>);
00336   exit(0);
00337  }
00338 
00339 
00340  <span class="comment">// set transverse distribution:</span>
00341 
00342  <a class="code" href="structTwissP.html">TwissP</a> twiss0; 
00343  lattice.<a class="code" href="classBeamLine.html#a14">first_element</a>();
00344  twiss0=last_elem-&gt;get_twiss();
00345  
00346  <span class="keywordtype">double</span> Ds0=0.0; <span class="comment">// Dispersion derivative</span>
00347 
00348  <span class="keywordflow">switch</span>(<a class="code" href="group__Beam.html#ga4">init_pic_xy</a>) {
00349  <span class="keywordflow">case</span> 0:   <span class="comment">//  Waterbag </span>
00350   Pics.waterbag_xy(6.0e-6*rms_emittance_x0,
00351                    6.0e-6*<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>,
00352                    twiss0.<a class="code" href="structTwissP.html#o2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#o3">alpy</a>,
00353                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#o0">betx</a>,
00354                    pow(<a class="code" href="group__Beam.html#ga10">mismatch_y</a>,2)*twiss0.<a class="code" href="structTwissP.html#o1">bety</a>,
00355                    twiss0.<a class="code" href="structTwissP.html#o4">Dx</a>,Ds0,
00356                    centering,
00357                    &amp;d);
00358  
00359   <span class="keywordflow">break</span>;
00360  <span class="keywordflow">case</span> 1:   <span class="comment">//  KV </span>
00361   Pics.KV_xy(4.0e-6*rms_emittance_x0,
00362              4.0e-6*<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>,
00363                    twiss0.<a class="code" href="structTwissP.html#o2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#o3">alpy</a>,
00364                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#o0">betx</a>,
00365                    pow(<a class="code" href="group__Beam.html#ga10">mismatch_y</a>,2)*twiss0.<a class="code" href="structTwissP.html#o1">bety</a>,
00366                    twiss0.<a class="code" href="structTwissP.html#o4">Dx</a>,Ds0,centering,&amp;d);
00367  
00368   <span class="keywordflow">break</span>;
00369  <span class="keywordflow">case</span> 2:   <span class="comment">//  Semi-Gauss</span>
00370   Pics.SG(4.0e-6*rms_emittance_x0,
00371           4.0e-6*<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>,
00372                    twiss0.<a class="code" href="structTwissP.html#o2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#o3">alpy</a>,
00373                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#o0">betx</a>,
00374                    pow(<a class="code" href="group__Beam.html#ga10">mismatch_y</a>,2)*twiss0.<a class="code" href="structTwissP.html#o1">bety</a>,
00375                    twiss0.<a class="code" href="structTwissP.html#o4">Dx</a>,Ds0,centering,&amp;d);
00376  
00377   <span class="keywordflow">break</span>;
00378  <span class="keywordflow">case</span> 3:   <span class="comment">//  Gauss</span>
00379   Pics.Gauss_xy(1.0e-6*rms_emittance_x0,
00380                 1.0e-6*<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>,
00381                    twiss0.<a class="code" href="structTwissP.html#o2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#o3">alpy</a>,
00382                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#o0">betx</a>,
00383                    pow(<a class="code" href="group__Beam.html#ga10">mismatch_y</a>,2)*twiss0.<a class="code" href="structTwissP.html#o1">bety</a>,
00384                    twiss0.<a class="code" href="structTwissP.html#o4">Dx</a>,Ds0,centering,&amp;d);
00385  
00386   <span class="keywordflow">break</span>;
00387   <span class="keywordflow">default</span>:
00388   printf(<span class="stringliteral">"Wrong PIC Initalization\n"</span>);
00389   exit(0);
00390  }
00391 
00392 
00393  <span class="comment">//----------------simulation loop--------------------------</span>
00394 
00395  <span class="comment">// options (should go in an input file later):</span>
00396  
00397  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga1">space_charge</a>=3;   <span class="comment">// space charge yes(1)/no(0)/linear(2)/nonlinear(3)</span>
00398  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga2">imp_kick</a>=1;      <span class="comment">// impedence on (1)</span>
00399  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga3">sliced</a>=0;   <span class="comment">// 2D (0) or 3D (1) </span>
00400  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga4">cavity</a>=0; <span class="comment">// rf cavity(1)/no(0)/barrier(2)</span>
00401  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga5">octupole_kick</a>=1; <span class="comment">// octupole kick </span>
00402  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga6">ampdetun_kick</a>=0; <span class="comment">// amplitude detuning kick </span>
00403  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga7">chroma</a>=0;   <span class="comment">// chromaticity correction (only CF)</span>
00404  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga8">bc_end</a>=1;        <span class="comment">// boundary condition in z: bunch(0)/periodic(1)</span>
00405  <span class="keywordtype">int</span> <a class="code" href="group__Simulation.html#ga3">print_cell</a>=120; <span class="comment">//  120;      // print every nth cell</span>
00406  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga9">footprint</a>=0;        <span class="comment">// scheme: map(0)/wavelength(1)</span>
00407  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga10">btf</a>=1;             <span class="comment">// btf dipole noise excitation</span>
00408  <span class="keywordtype">int</span> <a class="code" href="group__Other.html#ga11">btf_harmonic</a>=0;    <span class="comment">// btf mode number</span>
00409  
00410  <span class="comment">// other options:</span>
00411  
00412  <span class="keywordtype">double</span> dQm=-1.4*0.15; <span class="comment">// linear tune shift (dc value) for space_charge=2+3</span>
00413  <span class="keywordtype">int</span> Nexchange=Nelements; <span class="comment">// exchange of particles between slices every cell !!!!!!!!!!!!!!</span>
00414  <span class="keywordtype">int</span> Nprint=print_cell*Nelements; <span class="comment">// output of particles every cell</span>
00415  <span class="comment">//int Nibs=12*Nelements; // correct for IBS every Nibs steps</span>
00416  
00417  <span class="comment">// counters and other variables:</span>
00418  
00419  <span class="keywordtype">double</span> Ntot; <span class="comment">// total number of particles: for screen output</span>
00420  <span class="keywordtype">int</span> counter=0;  <span class="comment">// counts sub-elements</span>
00421  <span class="keywordtype">double</span> s=0.0;  
00422  <span class="keywordtype">double</span> Nslice; <span class="comment">// total number of slices</span>
00423  <span class="keywordtype">double</span> emitx;  <span class="comment">// emittance: for screen output</span>
00424  <span class="keywordtype">double</span> dtheta=0.0;  <span class="comment">// btf dipole kick</span>
00425  <span class="keywordtype">double</span> pickup_h;    <span class="comment">// horizontal pickup signal</span>
00426  <span class="keywordtype">double</span> rms_advancex=0.0, rms_advancey=0.0;
00427  
00428  <span class="comment">// start loop (do...while)</span>
00429  
00430  <span class="keywordflow">do</span> {
00431      
00432       <span class="comment">// Output:</span>
00433        
00434       <span class="comment">// to ppic.dat every element:</span>
00435 
00436      <span class="keywordflow">if</span>( counter%1 == 0 ) 
00437       {
00438        <span class="keywordtype">double</span> *momenta=<span class="keyword">new</span> <span class="keywordtype">double</span>[15];
00439        <span class="keywordtype">double</span> *momenta_tot=<span class="keyword">new</span> <span class="keywordtype">double</span>[15];
00440        Nslice=Pics.get_size(); <span class="comment">// number of particles in this slice      </span>
00441        momenta[0]=Nslice*Pics.rms_emittance_x();  
00442        momenta[1]=Nslice*Pics.rms_emittance_y();
00443        momenta[2]=Nslice*Pics.x_max();
00444        momenta[3]=Nslice*Pics.y_max();
00445        momenta[4]=Nslice*Pics.x_rms();
00446        momenta[5]=Nslice*Pics.y_rms();
00447        momenta[6]=Nslice*Pics.rms_momentum_spread();
00448        momenta[7]=Nslice*Pics.x2y2();
00449        momenta[8]=Nslice*Pics.xy();
00450        momenta[9]=Nslice;  
00451        momenta[10]=Nslice*rms_advancex;  <span class="comment">// rms wave length in x</span>
00452        momenta[11]=Nslice*rms_advancey;
00453        momenta[12]=Nslice*Pics.offset_x();  <span class="comment">// pickup_h !!!!!!!!!!!</span>
00454        momenta[13]=Nslice*Pics.offset_y();
00455        momenta[14]=Nslice*dtheta;          <span class="comment">// btf noise signal</span>
00456        <span class="comment">// mpi_reduce for summation of all 15 moments over all slices</span>
00457        MPI_Reduce(momenta,momenta_tot,15,
00458                   MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
00459        
00460        
00461        Ntot=momenta_tot[9];  <span class="comment">// total number of particles over all slices </span>
00462        emitx=momenta_tot[0]/Ntot;  <span class="comment">// total rms emittance</span>
00463        
00464        <span class="comment">// momenta to ppic.dat</span>
00465        <span class="keywordflow">if</span>(myid == 0) {
00466             fprintf(out,<span class="stringliteral">"%g"</span>,s);
00467                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;15;i++) 
00468                  fprintf(out,<span class="stringliteral">"%15g"</span>,momenta_tot[i]/Ntot);
00469                fprintf(out,<span class="stringliteral">"\n"</span>);
00470                fflush(out);
00471        }
00472        <span class="keyword">delete</span> momenta;
00473        <span class="keyword">delete</span> momenta_tot; 
00474       }     
00475 
00476       
00477      <span class="comment">// output to screen and large files:</span>
00478  
00479      <span class="keywordflow">if</span>( counter%Nprint == 0  ) 
00480        {
00481         <span class="keywordflow">if</span>( myid == 0 )
00482          {
00483           printf(<span class="stringliteral">"saving at s=%g (m) eps_t=%g dp/p=%g zm2=%g Ntotal=%g\n"</span>,
00484             s,1.0e6*emitx,Pics.rms_momentum_spread(),zm2,Ntot);
00485           cout.flush();               
00486           
00487           Ex.print();
00488           Ey.print();
00489         
00490          }
00491          
00492         <span class="comment">// to pic.dat:</span>
00493 
00494         Pics.print(<a class="code" href="group__Simulation.html#ga1">pic_subset</a>);
00495                 
00496         <span class="comment">// collect densities for output only:</span>
00497         
00498         Pics.gatherZ(charge*qe/dz,rho_z_tmp);  
00499         Pics.gatherX(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight*charge*qe/dz,dipole_current_x_tmp);  
00500         Pics.gatherXY(charge*qe/circum,rho_xy_tmp);
00501         Pics.gatherXXs(charge*qe/circum,xxs_tmp);
00502         Pics.gatherYYs(charge*qe/circum,yys_tmp);
00503         Pics.gatherXsYs(charge*qe/circum,xsys_tmp); 
00504         Pics.gatherZX(charge*qe/circum,zx_tmp); <span class="comment">// !!! added</span>
00505         
00506         <span class="comment">// summation over all slices:</span>
00507         
00508         MPI_Allreduce(rho_z_tmp.get_grid(),rho_z.get_grid(),
00509                       <a class="code" href="group__Particles.html#ga3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00510         MPI_Allreduce(dipole_current_x_tmp.get_grid(),dipole_current_x.get_grid(),
00511                       <a class="code" href="group__Particles.html#ga3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);          
00512         MPI_Allreduce(rho_xy_tmp.get_grid(),rho_xy.get_grid(),
00513                       <a class="code" href="group__Particles.html#ga1">NX</a>*<a class="code" href="group__Particles.html#ga2">NY</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00514         MPI_Allreduce(xxs_tmp.get_grid(),xxs.get_grid(),
00515                       <a class="code" href="group__Particles.html#ga1">NX</a>*<a class="code" href="group__Particles.html#ga1">NX</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00516         MPI_Allreduce(yys_tmp.get_grid(),yys.get_grid(),
00517                       NY*NY,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00518         MPI_Allreduce(xsys_tmp.get_grid(),xsys.get_grid(),
00519                       NX*NY,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00520         MPI_Allreduce(zx_tmp.get_grid(),zx.get_grid(),
00521                       <a class="code" href="group__Particles.html#ga3">NZ</a>*NX,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00522                       
00523         <span class="comment">// output to density files:</span>
00524   
00525         <span class="keywordflow">if</span>( myid == 0 ) {
00526           dipole_current_x.print();
00527           rho_z.print();
00528           rho_xy.print();
00529           xxs.print();
00530           yys.print();
00531           xsys.print();
00532           zx.print();}
00533        } 
00534 
00535     <span class="comment">// at beginning of a cell: calculate advance per (last) cell, store old coordinates </span>
00536 
00537      <span class="keywordflow">if</span>( lattice.<a class="code" href="classBeamLine.html#a10">get_element</a>() == first_elem  ) 
00538       {
00539         rms_advancex=Pics.rms_phaseadvance_h();    <span class="comment">//Pics.rms_wavelength_h();</span>
00540         rms_advancey=Pics.rms_phaseadvance_v();   <span class="comment">//Pics.rms_wavelength_v(); </span>
00541         <span class="keywordflow">if</span>(footprint == 0) Pics.store_old_coordinates(); 
00542       }
00543 
00544      <span class="comment">// Transport particles through linear sectormap, update slice position s:</span>
00545      
00546      ds=lattice.<a class="code" href="classBeamLine.html#a10">get_element</a>()-&gt;get_L(); 
00547      s+=ds;
00548      Pics.transport(lattice.<a class="code" href="classBeamLine.html#a10">get_element</a>()-&gt;get_map(),<a class="code" href="group__Lattice.html#ga0">piperadius</a>);
00549      
00550      <span class="comment">// update wave lengths</span>
00551      
00552      <span class="keywordflow">if</span> ( footprint == 1 ) {
00553      Pics.update_wavelength_h(ds,0.0);
00554      Pics.update_wavelength_v(ds);}
00555      
00556      <span class="comment">// nonlinear thin lens kick:</span>
00557      <span class="keywordflow">if</span>( octupole_kick == 1 ) 
00558         Pics.kick(Oct0,ds); 
00559 
00560      <span class="keywordflow">if</span>( ampdetun_kick == 1 ) 
00561         Pics.kick(Amp0,ds);  
00562      
00563     <span class="comment">// correct for chromaticity</span>
00564      <span class="keywordflow">if</span>( chroma == 1 ) 
00565         Pics.kick(Chrom0,ds); 
00566      
00567     <span class="comment">// cavity kick every cell:</span>
00568     
00569     <span class="keywordflow">if</span>( cavity == 1 &amp;&amp; counter%Nelements==0.0 )
00570          Pics.cavity_kick(V0rf*cell_length/circum,1,circum/(2.0*PI));
00571     <span class="keywordflow">if</span>( cavity == 2 &amp;&amp; counter%Nelements==0.0 )
00572          Pics.barrier_kick(zm1,zm2);
00573     
00574     <span class="comment">// impedance kicks</span>
00575     
00576     komplex dqc_t(-0.15,0.0); <span class="comment">// sliced==0</span>
00577     
00578     <span class="keywordflow">if</span>( imp_kick == 1 ) {
00579     <span class="keywordflow">if</span>( sliced == 0 )   
00580        Pics.kick(ds/circum*InducedKick(Pics.offset_x(),ds,dqc_t,SP.<a class="code" href="structSynParticle.html#o2">beta0</a>,tunex,circum),0.0);
00581     <span class="keywordflow">else</span> {   
00582        Pics.gatherX(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight*charge*qe/dz,dipole_current_x_tmp);
00583        MPI_Allreduce(dipole_current_x_tmp.get_grid(),dipole_current_x.get_grid(),
00584                       <a class="code" href="group__Particles.html#ga3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);    
00585        <span class="comment">// pick up signal</span>
00586        pickup_h=Pics.pickup_signal(dipole_current_x,circum,s/(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight))/<a class="code" href="group__Beam.html#ga3">current</a>;                      
00587        InducedKick(dipole_current_x,tunex,2.0*PI*SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight/circum,SP.<a class="code" href="structSynParticle.html#o2">beta0</a>,SP.<a class="code" href="structSynParticle.html#o3">gamma0</a>*mp*SP.<a class="code" href="structSynParticle.html#o1">A</a>*pow(clight,2),SP.<a class="code" href="structSynParticle.html#o0">Z</a>*qe); 
00588        Pics.impedance_kick(dipole_current_x,circum,ds); 
00589     }
00590     }
00591     
00592    <span class="comment">// charge density -&gt; electric fields:</span>
00593        
00594      <span class="keywordflow">if</span>( space_charge == 1 )
00595      {
00596         <span class="comment">// PIC -&gt; charge density for Poisson solver:</span>
00597         <span class="keywordflow">if</span> (sliced == 0)
00598           Pics.gatherXY(charge*qe/slice_length,rho_xy);
00599         <span class="keywordflow">else</span>
00600           Pics.gatherXYZ(charge*qe/rho_xyz.get_dz(),rho_xyz);    
00601         <span class="comment">// Poisson solver</span>
00602         <span class="keywordflow">if</span> (sliced == 0)
00603           poisson_xy(Ex,Ey,rho_xy);
00604         <span class="keywordflow">else</span> 
00605           poisson_xyz(Ex3,Ey3,rho_xyz);
00606         
00607      }   
00608      
00609    <span class="comment">// Shift xs and ys:</span>
00610         
00611       <span class="keywordflow">if</span>(space_charge==1 &amp;&amp; ds &gt; 0.0) 
00612         {
00613           <span class="keywordflow">if</span> (sliced == 0)
00614              Pics.kick(Ex,Ey,ds);
00615           <span class="keywordflow">else</span> 
00616              Pics.kick(Ex3,Ey3,ds);
00617         }
00618          
00619         
00620     <span class="comment">// linear sc kicks:</span>
00621    
00622       <span class="keywordflow">if</span>(space_charge == 2  &amp;&amp;  ds &gt; 0.0)
00623              Pics.linear_SC_kick(dQm,dQm,tunex,tuney,
00624                                  rho_z,<a class="code" href="group__Beam.html#ga3">current</a>/(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight),
00625                                  circum,ds);
00626     <span class="comment">// nonlinear sc kicks:</span>
00627    
00628       <span class="keywordflow">if</span>(space_charge == 3  &amp;&amp;  ds &gt; 0.0)
00629              Pics.nonlinear_SC_kick(sqrt(1.0e-6*twiss0.<a class="code" href="structTwissP.html#o0">betx</a>*rms_emittance_x0),
00630                                     sqrt(1.0e-6*twiss0.<a class="code" href="structTwissP.html#o1">bety</a>*<a class="code" href="group__Beam.html#ga8">rms_emittance_y0</a>),
00631                                     dQm,dQm,tunex,tuney,
00632                                     rho_z,<a class="code" href="group__Beam.html#ga3">current</a>/(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight),
00633                                     circum,ds);                  
00634                                  
00635                                  
00636   <span class="comment">// dipole noise modulation kick:</span>
00637     
00638     <span class="keywordflow">if</span> ( btf == 1 )
00639         dtheta=Pics.dipole_mod_kick(s/(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight),ds,circum,1.0e-4,
00640             0.8*(tunex-0.15)*SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight/circum,1.2*(tunex-0.15)*SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight/circum,
00641             <a class="code" href="group__Simulation.html#ga2">cells</a>*cell_length/(SP.<a class="code" href="structSynParticle.html#o2">beta0</a>*clight),btf_harmonic,&amp;dran); 
00642                                  
00643    <span class="comment">// correct for ibs: </span>
00644    <span class="comment">/*</span>
00645 <span class="comment">    if( counter != 0 &amp;&amp; counter%Nibs == 0 ) </span>
00646 <span class="comment">     {</span>
00647 <span class="comment">      double rate_ibs=100000.0;     </span>
00648 <span class="comment">      double Dz=rate_ibs*pow(Pics.rms_momentum_spread(),2);</span>
00649 <span class="comment">      double Dxy=rate_ibs*0.5*(Pics.rms_emittance_x()+Pics.rms_emittance_y());</span>
00650 <span class="comment">      double betx=lattice.get_element()-&gt;get_betx();</span>
00651 <span class="comment">      double bety=lattice.get_element()-&gt;get_bety();</span>
00652 <span class="comment">      Pics.langevin(rate_ibs,rate_ibs,Dxy,Dz,ds,betx,bety,&amp;d);</span>
00653 <span class="comment">     }</span>
00654 <span class="comment">    */</span>
00655   <span class="comment">// exchange particles between slices:</span>
00656      
00657    
00658      <span class="keywordflow">if</span>( counter != 0 &amp;&amp; counter%Nexchange == 0 &amp;&amp; numprocs &gt; 1 ) 
00659        {
00660          <span class="keywordtype">int</span> destl; 
00661          <span class="keywordtype">int</span> destr; 
00662          <span class="keywordtype">int</span> Npl;   
00663          <span class="keywordtype">int</span> Npr;   
00664 
00665          <span class="comment">//---finite bunch: no exchange between ends---</span>
00666           <span class="keywordflow">if</span> (bc_end == 0) {
00667            <span class="keywordflow">if</span>(myid == 0) {destl=-1; destr=myid+1;}
00668            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(myid == numprocs-1 ) {destl=myid-1; destr=-1;}
00669            <span class="keywordflow">else</span> { destl=myid-1; destr=myid+1; }
00670           }
00671          
00672          <span class="comment">//---periodic (in z) boundary condition--- </span>
00673           <span class="keywordflow">if</span> (bc_end == 1) {
00674            <span class="keywordflow">if</span>(myid == 0) {destl=numprocs-1; destr=myid+1;}
00675            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(myid == numprocs-1 ) {destl=myid-1; destr=0;}
00676            <span class="keywordflow">else</span> { destl=myid-1; destr=myid+1;}
00677           }
00678           
00680          vector&lt;Particle&gt; pl, pr;
00681          
00682          <span class="comment">// send to neighbor slices:</span>
00683          
00684          <span class="keywordflow">if</span>( destl &gt;= 0 ) {
00685           pl=Pics.get_particles_left(circum);
00686           Npl=pl.size();
00687           MPI_Send(&amp;Npl,1,MPI_INT,destl,1,MPI_COMM_WORLD);
00688           MPI_Send(&amp;pl[0],Npl,particletype,destl,1,MPI_COMM_WORLD);}  
00689          <span class="keywordflow">if</span>( destr &gt;= 0 ) {
00690           pr=Pics.get_particles_right(circum);
00691           Npr=pr.size();
00692           MPI_Send(&amp;Npr,1,MPI_INT,destr,0,MPI_COMM_WORLD);
00693           MPI_Send(&amp;pr[0],Npr,particletype,destr,0,MPI_COMM_WORLD);} 
00694        
00695          <span class="comment">// receive from neighbour slices: </span>
00696           
00697          Npl=0; Npr=0;
00698          vector&lt;Particle&gt; pl_in, pr_in;
00699          <span class="keywordflow">if</span>( destl &gt;= 0 ) {   
00700           MPI_Recv(&amp;Npl,1,MPI_INT,destl,0,MPI_COMM_WORLD,&amp;status);
00701           pl_in=vector&lt;Particle&gt;(Npl);
00702           MPI_Recv(&amp;pl_in[0],Npl,particletype,destl,0,MPI_COMM_WORLD,&amp;status);}
00703          <span class="keywordflow">if</span>( destr &gt;= 0 ) {
00704           MPI_Recv(&amp;Npr,1,MPI_INT,destr,1,MPI_COMM_WORLD,&amp;status);
00705           pr_in=vector&lt;Particle&gt;(Npr);
00706           MPI_Recv(&amp;pr_in[0],Npr,particletype,destr,1,MPI_COMM_WORLD,&amp;status);}
00707          Pics.add_particles(pl_in);
00708          Pics.add_particles(pr_in);
00709          }
00710 
00711 
00712     <span class="comment">// For bunch compression: Update slice boundaries z1 and z2 from </span>
00713     <span class="comment">// new bunch boundaries zm1,zm2:</span>
00714     
00715    
00716     
00717     <span class="comment">/*if( counter != 0 &amp;&amp; counter%Nexchange == 0 ) </span>
00718 <span class="comment">    {</span>
00719 <span class="comment">      if(myid == 0)</span>
00720 <span class="comment">        zm1=Pics.z_min();</span>
00721 <span class="comment">      MPI_Bcast(&amp;zm1,1,MPI_DOUBLE,0,MPI_COMM_WORLD);        </span>
00722 <span class="comment">      if(myid == numprocs-1)</span>
00723 <span class="comment">        zm2=Pics.z_max();   </span>
00724 <span class="comment">      MPI_Bcast(&amp;zm2,1,MPI_DOUBLE,numprocs-1,MPI_COMM_WORLD); </span>
00725 <span class="comment">    </span>
00726 <span class="comment">      Pics.z1=zm1+myid*(zm2-zm1)/numprocs;</span>
00727 <span class="comment">      Pics.z2=Pics.z1+(zm2-zm1)/numprocs;    </span>
00728 <span class="comment">      slice_length=Pics.z2-Pics.z1;</span>
00729 <span class="comment">      </span>
00730 <span class="comment">      rho_xyz.get_zleft()=zm1;</span>
00731 <span class="comment">      rho_xyz.get_zright()=zm2;</span>
00732 <span class="comment">      Ex3.get_zleft()=zm1;</span>
00733 <span class="comment">      Ex3.get_zright()=zm2;</span>
00734 <span class="comment">      Ey3.get_zleft()=zm1;</span>
00735 <span class="comment">      Ey3.get_zright()=zm2;</span>
00736 <span class="comment">      </span>
00737 <span class="comment">    }*/</span>
00738       
00739    
00740     
00741    <span class="comment">// advance in beam line, go to next element:   </span>
00742 
00743      lattice.<a class="code" href="classBeamLine.html#a13">next_element</a>(); 
00744      counter++;
00745 
00746 
00747  } <span class="keywordflow">while</span>( counter != <a class="code" href="group__Simulation.html#ga2">cells</a>*Nelements );
00748 
00749  <span class="comment">//------------------end of loop-------------------------------</span>
00750  
00751   <span class="comment">// close files:</span>
00752 
00753   fclose(out);
00754   
00755   <span class="comment">// MPI end:</span>
00756   
00757   MPI_Finalize(); 
00758 
00759   
00760 }
00761 
00762 
00763 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Wed Jan 3 16:13:54 2007 for Track by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.2 </small></address>
</body>
</html>

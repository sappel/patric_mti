<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Track: Pic.old.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.2 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="modules.html">Modules</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a></div>
<div class="nav">
<a class="el" href="dir_000000.html">include</a></div>
<h1>Pic.old.h</h1><div class="fragment"><pre class="fragment">00001 
00002 
00004 
00005 <span class="keyword">struct </span><a class="code" href="structParticle.html">Particle</a> {
<a name="l00007"></a><a class="code" href="structParticle.html#o2">00007</a>  <span class="keywordtype">double</span> <a class="code" href="structParticle.html#o0">x</a>, <a class="code" href="structParticle.html#o1">y</a>, <a class="code" href="structParticle.html#o2">z</a>; 
<a name="l00009"></a><a class="code" href="structParticle.html#o5">00009</a>  <span class="keywordtype">double</span> <a class="code" href="structParticle.html#o3">dp</a>, <a class="code" href="structParticle.html#o4">xs</a>, <a class="code" href="structParticle.html#o5">ys</a>;
<a name="l00011"></a><a class="code" href="structParticle.html#o21">00011</a>  <span class="keywordtype">double</span> <a class="code" href="structParticle.html#o18">ah</a>, <a class="code" href="structParticle.html#o19">bh</a>, <a class="code" href="structParticle.html#o20">ch</a>, <a class="code" href="structParticle.html#o21">dh</a>; 
<a name="l00013"></a><a class="code" href="structParticle.html#o25">00013</a>  <span class="keywordtype">double</span> <a class="code" href="structParticle.html#o22">av</a>, <a class="code" href="structParticle.html#o23">bv</a>, <a class="code" href="structParticle.html#o24">cv</a>, <a class="code" href="structParticle.html#o25">dv</a>; 
00014 };
00015 
00016 
00018 
00019 <span class="keyword">struct </span><a class="code" href="structSynParticle.html">SynParticle</a> {
00020  
<a name="l00021"></a><a class="code" href="structSynParticle.html#o0">00021</a>         <span class="keywordtype">double</span> <a class="code" href="structSynParticle.html#o0">Z</a>; 
<a name="l00022"></a><a class="code" href="structSynParticle.html#o1">00022</a>         <span class="keywordtype">double</span> <a class="code" href="structSynParticle.html#o1">A</a>; 
00023         <span class="keywordtype">double</span> beta0;
00024         <span class="keywordtype">double</span> gamma0;
00025         <span class="keywordtype">double</span> eta0;        
00026 };   
00027 
00028 
00030 
00031 <span class="keyword">class </span><a class="code" href="classPic.html">Pic</a> {
00032  
00033  vector&lt;Particle&gt; pics;
00034  <span class="keywordtype">double</span> charge;   <span class="comment">// macro particle charge/qe</span>
00035  <a class="code" href="structSynParticle.html">SynParticle</a> *SP; <span class="comment">// Synchronous particle</span>
00036  FILE *out;       <span class="comment">// output file</span>
00037 
00038 <span class="keyword">public</span>:
<a name="l00040"></a><a class="code" href="classPic.html#o1">00040</a>  <span class="keywordtype">double</span> <a class="code" href="classPic.html#o0">z1</a>,<a class="code" href="classPic.html#o1">z2</a>;
00041 
00042  <a class="code" href="classPic.html">Pic</a>() {}
00043  <a class="code" href="classPic.html">Pic</a>(<a class="code" href="structSynParticle.html">SynParticle</a>* ptr ,<span class="keywordtype">double</span> q, <span class="keywordtype">int</span> n, string filename) : pics(n)
00044   { charge=q; SP=ptr; out=fopen(filename.c_str(),<span class="stringliteral">"w"</span>);}
00045  ~<a class="code" href="classPic.html">Pic</a>() { fclose(out); }
00046 
00047  <span class="keywordtype">double</span> get_charge() { <span class="keywordflow">return</span> charge; }
00048  <span class="keywordtype">int</span> get_size() { <span class="keywordflow">return</span> pics.size(); }
00049 
00050  <span class="comment">// Transverse distributions</span>
00051  
00053  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a5">waterbag_xy</a>(<span class="keywordtype">double</span> emittance_x, <span class="keywordtype">double</span> emittance_y, 
00054            <span class="keywordtype">double</span> alpha_x, <span class="keywordtype">double</span> beta_x,
00055            <span class="keywordtype">double</span> beta_x, <span class="keywordtype">double</span> beta_y, <span class="keywordtype">double</span> D0, <span class="keywordtype">double</span> Ds0, 
00056            <span class="keywordtype">double</span> centering, <span class="keywordtype">long</span> *d);
00058  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a6">KV_xy</a>(<span class="keywordtype">double</span> emittance_x, <span class="keywordtype">double</span> emittance_y, 
00059             <span class="keywordtype">double</span> alpha_x, <span class="keywordtype">double</span> alpha_y,
00060             <span class="keywordtype">double</span> beta_x, <span class="keywordtype">double</span> beta_y, <span class="keywordtype">double</span> D0, <span class="keywordtype">double</span> Ds0, <span class="keywordtype">long</span> *d);
00062  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a7">SG</a>(<span class="keywordtype">double</span> emittance_x, <span class="keywordtype">double</span> emittance_y, 
00063          <span class="keywordtype">double</span> alpha_x, <span class="keywordtype">double</span> alpha_y,
00064          <span class="keywordtype">double</span> beta_x, <span class="keywordtype">double</span> beta_y, <span class="keywordtype">double</span> D0, <span class="keywordtype">double</span> Ds0, <span class="keywordtype">long</span> *d); 
00065  
00066 
00067  <span class="comment">// longitudinal distributions:</span>
00068 
00070  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a9">parabolic</a>(<span class="keywordtype">double</span> z0, <span class="keywordtype">double</span> zlm, <span class="keywordtype">double</span> dp0, <span class="keywordtype">long</span> Np, <span class="keywordtype">long</span> *d);
00072  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a11">gaussz</a>(<span class="keywordtype">double</span> dp0, <span class="keywordtype">long</span> *d);
00074  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a12">coasting_beam</a>(<span class="keywordtype">long</span> Np, <span class="keywordtype">double</span> length, <span class="keywordtype">long</span> *d);
00075 
00077 
00078  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a13">print</a>(<span class="keywordtype">int</span> subset); 
00079 
00080  <span class="comment">// rms momenta:</span>
00081 
00082  <span class="keywordtype">double</span> rms_emittance_x();  
00083  <span class="keywordtype">double</span> rms_emittance_y();  
00084  <span class="keywordtype">double</span> x_rms();
00085  <span class="keywordtype">double</span> x_max();
00086  <span class="keywordtype">double</span> y_rms();
00087  <span class="keywordtype">double</span> y_max();
00088  <span class="keywordtype">double</span> z_mean();
00089  <span class="keywordtype">double</span> z_min();
00090  <span class="keywordtype">double</span> z_max();
00091  <span class="keywordtype">double</span> z2_mean();
00092  <span class="keywordtype">double</span> rms_z_width();
00093  <span class="keywordtype">double</span> pz_mean();
00094  <span class="keywordtype">double</span> pz2_mean();
00095  <span class="keywordtype">double</span> rms_momentum_spread();
00096  <span class="keywordtype">double</span> x2y2();
00097  <span class="keywordtype">double</span> xy();
00098  <span class="keywordtype">double</span> offset_x();
00099  <span class="keywordtype">double</span> offset_y();
00100 
00101  <span class="comment">// single particle phase advance:</span>
00102 
00103  <span class="keywordtype">double</span> get_phaseadvance_h(<span class="keywordtype">int</span> j);
00104  <span class="keywordtype">double</span> get_phaseadvance_v(<span class="keywordtype">int</span> j);
00105  <span class="keywordtype">void</span> clear_maps();
00106  <span class="keywordtype">void</span> set_maps(<a class="code" href="classSectorMap.html">SectorMap</a>* M);
00107  <span class="keywordtype">double</span> rms_phaseadvance_h();
00108  <span class="keywordtype">double</span> rms_phaseadvance_v();
00109 
00111  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a43">transport</a>(<a class="code" href="classSectorMap.html">SectorMap</a>* M, <span class="keywordtype">double</span> boundary);
00113  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a44">kick</a>(Grid2D&amp; Ex, Grid2D&amp; Ey, <span class="keywordtype">double</span> ds);
00115  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a44">kick</a>(<span class="keywordtype">double</span> fx, <span class="keywordtype">double</span> fy);
00117  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a47">cavity_kick</a>(<span class="keywordtype">double</span> voltage0, <span class="keywordtype">int</span> harmonic,<span class="keywordtype">double</span> R); 
00119  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a44">kick</a>(NonlMap&amp; M);
00120 
00122  <span class="keywordtype">void</span> <a class="code" href="classPic.html#a55">langevin</a>(<span class="keywordtype">double</span> beta_fxy, <span class="keywordtype">double</span> beta_fz, <span class="keywordtype">double</span> Dxy, <span class="keywordtype">double</span> Dz, 
00123           <span class="keywordtype">double</span> ds, <span class="keywordtype">double</span> betx, <span class="keywordtype">double</span> bety, <span class="keywordtype">long</span>* d);
00124  
00125  <span class="comment">// grid to particle/particle to grid interpolations:</span>
00126 
00127  <span class="keywordtype">void</span> gatherZ(<span class="keywordtype">double</span> pic_charge,Grid1D&amp; target);
00128  <span class="keywordtype">void</span> gatherX(<span class="keywordtype">double</span> pic_charge,Grid1D&amp; target);
00129  <span class="keywordtype">void</span> gatherY(<span class="keywordtype">double</span> pic_charge,Grid1D&amp; target);
00130  <span class="keywordtype">void</span> gatherXY(<span class="keywordtype">double</span> pic_charge,Grid2D&amp; target);
00131  <span class="keywordtype">void</span> gatherXXs(<span class="keywordtype">double</span> pic_charge,Grid2D&amp; target);
00132  <span class="keywordtype">void</span> gatherYYs(<span class="keywordtype">double</span> pic_charge,Grid2D&amp; target);
00133  <span class="keywordtype">void</span> gatherXsYs(<span class="keywordtype">double</span> pic_charge,Grid2D&amp; target);
00134  
00135  <span class="comment">// exchange of particles </span>
00136 
00137  vector&lt;Particle&gt; get_particles_left(<span class="keywordtype">double</span> length);
00138  vector&lt;Particle&gt; get_particles_right(<span class="keywordtype">double</span> length);
00139  <span class="keywordtype">void</span> add_particles(vector&lt;Particle&gt;&amp; part);
00140 
00141 };
00142 
00143 
00144 
00145 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Wed Jan 3 16:13:55 2007 for Track by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.2 </small></address>
</body>
</html>

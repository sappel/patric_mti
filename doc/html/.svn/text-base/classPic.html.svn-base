<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Pic class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3 -->
<center>
<a class="qindex" href="index.html">Main Page</a> &nbsp; <a class="qindex" href="modules.html">Modules</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; </center>
<hr><h1>Pic Class Reference</h1><a class="el" href="structParticle.html">Particle</a> container. 
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Pic_8h-source.html">Pic.h</a>&gt;</code>
<p>
<a href="classPic-members.html">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Public Member Functions</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="a1" doxytag="Pic::Pic"></a>
&nbsp;</td><td valign=bottom><b>Pic</b> (<a class="el" href="structSynParticle.html">SynParticle</a> *ptr,double q, int n, string filename)</td></tr>
<tr><td nowrap align=right valign=top><a name="a3" doxytag="Pic::get_charge"></a>
double&nbsp;</td><td valign=bottom><b>get_charge</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a4" doxytag="Pic::get_size"></a>
int&nbsp;</td><td valign=bottom><b>get_size</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a5" doxytag="Pic::waterbag_xy"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a5">waterbag_xy</a> (double emittance_x, double emittance_y, double alpha_x, double beta_x, double beta_x, double beta_y, double D0, double Ds0, double centering, double <a class="el" href="group__Lattice.html#a1">circum</a>, double zlm, double <a class="el" href="group__Other.html#a7">chroma</a>, double tunex, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">tranversal waterbag distribution:</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a6" doxytag="Pic::KV_xy"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a6">KV_xy</a> (double emittance_x, double emittance_y, double alpha_x, double alpha_y, double beta_x, double beta_y, double D0, double Ds0, double centering, double <a class="el" href="group__Impedance.html#a3">nres</a>, double <a class="el" href="group__Lattice.html#a1">circum</a>, double zlm, double <a class="el" href="group__Other.html#a7">chroma</a>, double tunex, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">KV distribution.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a7" doxytag="Pic::SG"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a7">SG</a> (double emittance_x, double emittance_y, double alpha_x, double alpha_y, double beta_x, double beta_y, double D0, double Ds0, double centering, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">Semi-gaussian.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a8" doxytag="Pic::Gauss_xy"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a8">Gauss_xy</a> (double emittance_x, double emittance_y, double alpha_x, double alpha_y, double beta_x, double beta_y, double D0, double Ds0, double centering, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">Gaussian.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a9" doxytag="Pic::parabolic"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a9">parabolic</a> (double z0, double zlm, double dp0, long Np, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">Parabolic bunch.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a10" doxytag="Pic::parabolic_dc"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a10">parabolic_dc</a> (double length, double dp0, long Np, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">coasting beam with parabolic momentum spread distribution</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a11" doxytag="Pic::gaussz"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a11">gaussz</a> (double dp0, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">Gaussian momentum spread.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a12" doxytag="Pic::coasting_beam"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a12">coasting_beam</a> (long Np, double length, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">coasting beam</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a13" doxytag="Pic::bunch_gauss"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a13">bunch_gauss</a> (double zlm, double dp0, long Np, double <a class="el" href="group__Lattice.html#a1">circum</a>, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">Gaussian bunch.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a14" doxytag="Pic::bunch_const"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a14">bunch_const</a> (double zlm, double dp0, int linrf, double <a class="el" href="group__Lattice.html#a1">circum</a>, long Np, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">Constant bunch dist.</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a15" doxytag="Pic::barrier_air_bag"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a15">barrier_air_bag</a> (double zlm, double dp0, long Np, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">barrier air bag</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a16" doxytag="Pic::bunch_air_bag"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a16">bunch_air_bag</a> (double zlm, double dp0, double <a class="el" href="group__Lattice.html#a1">circum</a>, long Np, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">bunch air bag</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a17" doxytag="Pic::print"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a17">print</a> (int subset)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">basic PIC output:</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a18" doxytag="Pic::rms_emittance_x"></a>
double&nbsp;</td><td valign=bottom><b>rms_emittance_x</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a19" doxytag="Pic::rms_emittance_y"></a>
double&nbsp;</td><td valign=bottom><b>rms_emittance_y</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a20" doxytag="Pic::x_rms"></a>
double&nbsp;</td><td valign=bottom><b>x_rms</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a21" doxytag="Pic::x_max"></a>
double&nbsp;</td><td valign=bottom><b>x_max</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a22" doxytag="Pic::y_rms"></a>
double&nbsp;</td><td valign=bottom><b>y_rms</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a23" doxytag="Pic::y_max"></a>
double&nbsp;</td><td valign=bottom><b>y_max</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a24" doxytag="Pic::z_mean"></a>
double&nbsp;</td><td valign=bottom><b>z_mean</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a25" doxytag="Pic::z_min"></a>
double&nbsp;</td><td valign=bottom><b>z_min</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a26" doxytag="Pic::z_max"></a>
double&nbsp;</td><td valign=bottom><b>z_max</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a27" doxytag="Pic::z2_mean"></a>
double&nbsp;</td><td valign=bottom><b>z2_mean</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a28" doxytag="Pic::rms_z_width"></a>
double&nbsp;</td><td valign=bottom><b>rms_z_width</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a29" doxytag="Pic::pz_mean"></a>
double&nbsp;</td><td valign=bottom><b>pz_mean</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a30" doxytag="Pic::pz2_mean"></a>
double&nbsp;</td><td valign=bottom><b>pz2_mean</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a31" doxytag="Pic::rms_momentum_spread"></a>
double&nbsp;</td><td valign=bottom><b>rms_momentum_spread</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a32" doxytag="Pic::x2y2"></a>
double&nbsp;</td><td valign=bottom><b>x2y2</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a33" doxytag="Pic::xy"></a>
double&nbsp;</td><td valign=bottom><b>xy</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a34" doxytag="Pic::xzn"></a>
double&nbsp;</td><td valign=bottom><b>xzn</b> (double n, double zlm)</td></tr>
<tr><td nowrap align=right valign=top><a name="a35" doxytag="Pic::offset_x"></a>
double&nbsp;</td><td valign=bottom><b>offset_x</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a36" doxytag="Pic::offset_y"></a>
double&nbsp;</td><td valign=bottom><b>offset_y</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a37" doxytag="Pic::entropy"></a>
double&nbsp;</td><td valign=bottom><b>entropy</b> (Grid2D &amp;xsys)</td></tr>
<tr><td nowrap align=right valign=top><a name="a38" doxytag="Pic::update_wavelength_h"></a>
void&nbsp;</td><td valign=bottom><b>update_wavelength_h</b> (double ds, double offset_x)</td></tr>
<tr><td nowrap align=right valign=top><a name="a39" doxytag="Pic::update_wavelength_v"></a>
void&nbsp;</td><td valign=bottom><b>update_wavelength_v</b> (double ds)</td></tr>
<tr><td nowrap align=right valign=top>double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a40">get_wavelength_h</a> (int j)</td></tr>
<tr><td nowrap align=right valign=top>double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a41">get_wavelength_v</a> (int j)</td></tr>
<tr><td nowrap align=right valign=top><a name="a42" doxytag="Pic::rms_wavelength_h"></a>
double&nbsp;</td><td valign=bottom><b>rms_wavelength_h</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a43" doxytag="Pic::rms_wavelength_v"></a>
double&nbsp;</td><td valign=bottom><b>rms_wavelength_v</b> ()</td></tr>
<tr><td nowrap align=right valign=top>void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a44">store_old_coordinates</a> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a45" doxytag="Pic::get_phaseadvance_h"></a>
double&nbsp;</td><td valign=bottom><b>get_phaseadvance_h</b> (int j)</td></tr>
<tr><td nowrap align=right valign=top><a name="a46" doxytag="Pic::get_phaseadvance_v"></a>
double&nbsp;</td><td valign=bottom><b>get_phaseadvance_v</b> (int j)</td></tr>
<tr><td nowrap align=right valign=top><a name="a47" doxytag="Pic::rms_phaseadvance_h"></a>
double&nbsp;</td><td valign=bottom><b>rms_phaseadvance_h</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a48" doxytag="Pic::rms_phaseadvance_v"></a>
double&nbsp;</td><td valign=bottom><b>rms_phaseadvance_v</b> ()</td></tr>
<tr><td nowrap align=right valign=top><a name="a49" doxytag="Pic::transport"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a49">transport</a> (<a class="el" href="classSectorMap.html">SectorMap</a> *M, double boundary)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">particle transport using sector map</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a50" doxytag="Pic::kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a50">kick</a> (Grid2D &amp;Ex, Grid2D &amp;Ey, double ds)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">space charge kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a51" doxytag="Pic::kick"></a>
void&nbsp;</td><td valign=bottom><b>kick</b> (Grid3D &amp;Ex, Grid3D &amp;Ey, double ds)</td></tr>
<tr><td nowrap align=right valign=top><a name="a52" doxytag="Pic::kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a52">kick</a> (double fx, double fy)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">constant kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a53" doxytag="Pic::cavity_kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a53">cavity_kick</a> (double voltage0, int harmonic, double R)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">cavity kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a54" doxytag="Pic::cavity_kick_linear"></a>
void&nbsp;</td><td valign=bottom><b>cavity_kick_linear</b> (double voltage0, int harmonic, double R)</td></tr>
<tr><td nowrap align=right valign=top><a name="a55" doxytag="Pic::barrier_kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a55">barrier_kick</a> (double zm1, double zm2)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">barrier bucket kick (reflection at zm1 and zm2)</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a56" doxytag="Pic::kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a56">kick</a> (<a class="el" href="classThinLens.html">ThinLens</a> &amp;M, double ds)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">thin lens kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a57" doxytag="Pic::impedance_kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a57">impedance_kick</a> (Grid1D &amp;kick, double <a class="el" href="group__Lattice.html#a1">circum</a>, double ds)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">transverse impedance dipole kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a58" doxytag="Pic::linear_SC_kick"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a58">linear_SC_kick</a> (double <a class="el" href="group__Lattice.html#a9">dQxm</a>, double <a class="el" href="group__Lattice.html#a10">dQym</a>, double tunex, double tuney, Grid1D &amp;ldy, double ldy0, Grid1D &amp;dipole_current_x, Grid1D &amp;dipole_current_y, double <a class="el" href="group__Lattice.html#a1">circum</a>, double ds)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">non/linear transverse space charge kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a59" doxytag="Pic::nonlinear_SC_kick"></a>
void&nbsp;</td><td valign=bottom><b>nonlinear_SC_kick</b> (double xrms, double yrms, double <a class="el" href="group__Lattice.html#a9">dQxm</a>, double <a class="el" href="group__Lattice.html#a10">dQym</a>, double tunex, double tuney, Grid1D &amp;ldy, double ldy0, double <a class="el" href="group__Lattice.html#a1">circum</a>, double ds)</td></tr>
<tr><td nowrap align=right valign=top><a name="a60" doxytag="Pic::dipole_kick_simple"></a>
void&nbsp;</td><td valign=bottom><b>dipole_kick_simple</b> (double <a class="el" href="group__Lattice.html#a9">dQxm</a>, double <a class="el" href="group__Lattice.html#a10">dQym</a>, double tunex, double tuney, Grid1D &amp;ldy, double ldy0, Grid1D &amp;dipole_current_x, Grid1D &amp;dipole_current_y, double <a class="el" href="group__Lattice.html#a1">circum</a>, double ds)</td></tr>
<tr><td nowrap align=right valign=top>double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a61">dipole_mod_kick</a> (double t, double ds, double <a class="el" href="group__Lattice.html#a1">circum</a>, double theta, double freq0, double freq1, double tend, int n, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">btf noise kick</em> <a href="#a61"></a><em></em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a62" doxytag="Pic::dipole_mod_kick"></a>
double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a62">dipole_mod_kick</a> (double t, double ds, double <a class="el" href="group__Lattice.html#a1">circum</a>, double theta, double freq, int n)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">btf kick</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a63" doxytag="Pic::pickup_signal"></a>
double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a63">pickup_signal</a> (Grid1D &amp;dipole_current, double <a class="el" href="group__Lattice.html#a1">circum</a>, double t)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">signal from pickup</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a64" doxytag="Pic::langevin"></a>
void&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#a64">langevin</a> (double beta_fxy, double beta_fz, double Dxy, double Dz, double ds, double betx, double bety, long *d)</td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">add friction and diffusion (simple Fokker-Planck)</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="a65" doxytag="Pic::gatherZ"></a>
void&nbsp;</td><td valign=bottom><b>gatherZ</b> (double pic_charge, Grid1D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a66" doxytag="Pic::gatherX"></a>
void&nbsp;</td><td valign=bottom><b>gatherX</b> (double pic_charge, Grid1D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a67" doxytag="Pic::gatherXs"></a>
void&nbsp;</td><td valign=bottom><b>gatherXs</b> (double pic_charge, Grid1D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a68" doxytag="Pic::gatherY"></a>
void&nbsp;</td><td valign=bottom><b>gatherY</b> (double pic_charge, Grid1D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a69" doxytag="Pic::gatherXY"></a>
void&nbsp;</td><td valign=bottom><b>gatherXY</b> (double pic_charge, Grid2D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a70" doxytag="Pic::gatherXYZ"></a>
void&nbsp;</td><td valign=bottom><b>gatherXYZ</b> (double pic_charge, Grid3D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a71" doxytag="Pic::gatherXXs"></a>
void&nbsp;</td><td valign=bottom><b>gatherXXs</b> (double pic_charge, Grid2D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a72" doxytag="Pic::gatherZX"></a>
void&nbsp;</td><td valign=bottom><b>gatherZX</b> (double pic_charge, Grid2D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a73" doxytag="Pic::gatherYYs"></a>
void&nbsp;</td><td valign=bottom><b>gatherYYs</b> (double pic_charge, Grid2D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a74" doxytag="Pic::gatherXsYs"></a>
void&nbsp;</td><td valign=bottom><b>gatherXsYs</b> (double pic_charge, Grid2D &amp;target)</td></tr>
<tr><td nowrap align=right valign=top><a name="a75" doxytag="Pic::get_particles_left"></a>
vector&lt; <a class="el" href="structParticle.html">Particle</a> &gt;&nbsp;</td><td valign=bottom><b>get_particles_left</b> (double length)</td></tr>
<tr><td nowrap align=right valign=top><a name="a76" doxytag="Pic::get_particles_right"></a>
vector&lt; <a class="el" href="structParticle.html">Particle</a> &gt;&nbsp;</td><td valign=bottom><b>get_particles_right</b> (double length)</td></tr>
<tr><td nowrap align=right valign=top><a name="a77" doxytag="Pic::add_particles"></a>
void&nbsp;</td><td valign=bottom><b>add_particles</b> (vector&lt; <a class="el" href="structParticle.html">Particle</a> &gt; &amp;part)</td></tr>
<tr><td nowrap align=right valign=top><a name="a78" doxytag="Pic::periodic_bc"></a>
void&nbsp;</td><td valign=bottom><b>periodic_bc</b> (double length)</td></tr>
<tr><td colspan=2><br><h2>Public Attributes</h2></td></tr>
<tr><td nowrap align=right valign=top><a name="m0" doxytag="Pic::z1"></a>
double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#m0">z1</a></td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">left and right boundaries of the slice</em><br><br></td></tr>
<tr><td nowrap align=right valign=top><a name="m1" doxytag="Pic::z2"></a>
double&nbsp;</td><td valign=bottom><a class="el" href="classPic.html#m1">z2</a></td></tr>
<tr><td>&nbsp;</td><td><em class="mdesc">left and right boundaries of the slice</em><br><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="structParticle.html">Particle</a> container.
<p>

<p>
Definition at line <a class="el" href="Pic_8h-source.html#l00033">33</a> of file <a class="el" href="Pic_8h-source.html">Pic.h</a>.<hr><h2>Member Function Documentation</h2>
<a name="a61" doxytag="Pic::dipole_mod_kick"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> double Pic::dipole_mod_kick </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">double&nbsp;</td>
          <td class="mdname" nowrap> <em>t</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>ds</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>circum</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>theta</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>freq0</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>freq1</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>tend</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>n</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>long *&nbsp;</td>
          <td class="mdname" nowrap> <em>d</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
btf noise kick
<p>
Bandwidth limited noise dipole modulation kick for BTF.<p>
Input<p>
time: t step: ds kick angle: theta bandwidth: freq0, freq1 simulation duration: tend harmonic: n random number initialization: d<p>
Output<p>
xs kick 
<p>
Definition at line <a class="el" href="Pic_8cpp-source.html#l00529">529</a> of file <a class="el" href="Pic_8cpp-source.html">Pic.cpp</a>.
<p>
References <a class="el" href="Pic_8h-source.html#l00025">SynParticle::beta0</a>, and <a class="el" href="Main_8cpp-source.html#l00025">circum</a>.
<p>
<div class="fragment"><pre>00531 {
00532   <span class="keywordtype">double</span> dtheta=0.0, R=<a class="code" href="group__Lattice.html#a1">circum</a>/(2.0*PI), beta0=SP-&gt;<a class="code" href="structSynParticle.html#m2">beta0</a>;
00533   <span class="keywordtype">double</span> dfreq=1.0/(tend);
00534   <span class="keyword">const</span> <span class="keywordtype">int</span> Nran_max=10000;
00535   <span class="keywordtype">int</span> Nran=(int)floor((freq1-freq0)/dfreq);
00536   <span class="keyword">static</span> <span class="keywordtype">int</span> flag=0;
00537   <span class="keyword">static</span> <span class="keywordtype">double</span> freq[Nran_max];
00538   <span class="keyword">static</span> <span class="keywordtype">double</span> phase[Nran_max];
00539   <span class="keywordflow">if</span> (Nran &gt;= Nran_max) { cout &lt;&lt; <span class="stringliteral">"dipole kick: Nran &gt; Nran_max !"</span>; exit(0); }
00540   
00541   <span class="keywordflow">if</span> (flag==0)
00542           {
00543            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;Nran; j++)
00544                    {
00545                     <span class="comment">//freq[j]=freq0+(freq1-freq0)*ran1(d);</span>
00546                     freq[j]=floor(freq0/dfreq)*dfreq+j*dfreq;
00547                     phase[j]=PI*ran1(d); 
00548                    }       
00549            flag=1;        
00550           }
00551           
00552   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> l=0; l&lt;Nran; l++)
00553           dtheta+=theta*cos(2.0*PI*freq[l]*t+phase[l])/Nran;
00554   
00555   <span class="keywordflow">if</span> (t &lt; 20.0/freq0)
00556           dtheta=dtheta*t*freq0/20.0; 
00557   
00558   <span class="keywordflow">for</span>(<span class="keywordtype">long</span> j = 0; j &lt; pics.size(); j++)
00559    {   
00560     pics[j].xs+=ds/R*dtheta*cos(n/R*pics[j].z);
00561    }
00562    
00563  <span class="keywordflow">return</span> 0.5*dtheta*beta0*clight*cos(n/R*beta0*clight*t);
00564 }
</pre></div>    </td>
  </tr>
</table>
<a name="a40" doxytag="Pic::get_wavelength_h"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> double Pic::get_wavelength_h </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>j</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Calculates the horizontal phase advance per cell from the exit coordinates of the previous two cells. Does not work with finite dispersion yet. 
<p>
Definition at line <a class="el" href="Pic_8cpp-source.html#l01102">1102</a> of file <a class="el" href="Pic_8cpp-source.html">Pic.cpp</a>.
<p>
<div class="fragment"><pre>01103 {
01104  <span class="keywordflow">return</span> pics[j].lambda_h;
01105 }
</pre></div>    </td>
  </tr>
</table>
<a name="a41" doxytag="Pic::get_wavelength_v"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> double Pic::get_wavelength_v </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>j</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Calculates the vertical phase advance per cell from the exit coordinates of the previous two cells. Does not work with finite dispersion yet. 
<p>
Definition at line <a class="el" href="Pic_8cpp-source.html#l01135">1135</a> of file <a class="el" href="Pic_8cpp-source.html">Pic.cpp</a>.
<p>
<div class="fragment"><pre>01136 {
01137  <span class="keywordflow">return</span> pics[j].lambda_v;
01138 }
</pre></div>    </td>
  </tr>
</table>
<a name="a44" doxytag="Pic::store_old_coordinates"></a><p>
<table width="100%" cellpadding="2" cellspacing="0" border="0">
  <tr>
    <td class="md">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void Pic::store_old_coordinates </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
In order to calculate the instantanous phase advance we need the exit coordinates from the previous two cells 
<p>
Definition at line <a class="el" href="Pic_8cpp-source.html#l01079">1079</a> of file <a class="el" href="Pic_8cpp-source.html">Pic.cpp</a>.
<p>
<div class="fragment"><pre>01080 {
01081  <span class="keywordtype">int</span> n=pics.size();
01082  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;n; j++) 
01083   {
01084    pics[j].x2=pics[j].x1;
01085    pics[j].xs2=pics[j].xs1;
01086    pics[j].x1=pics[j].x;
01087    pics[j].xs1=pics[j].xs;
01088    pics[j].y2=pics[j].y1;
01089    pics[j].ys2=pics[j].ys1;
01090    pics[j].y1=pics[j].y;
01091    pics[j].ys1=pics[j].ys;
01092   }
01093 }
</pre></div>    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Pic_8h-source.html">Pic.h</a><li><a class="el" href="Pic_8cpp-source.html">Pic.cpp</a></ul>
<hr><address style="align: right;"><small>Generated on Wed Oct 14 14:27:07 2009 for Track by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.3 </small></address>
</body>
</html>

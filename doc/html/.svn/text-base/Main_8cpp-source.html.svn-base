<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Main.cpp Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3 -->
<center>
<a class="qindex" href="index.html">Main Page</a> &nbsp; <a class="qindex" href="modules.html">Modules</a> &nbsp; <a class="qindex" href="hierarchy.html">Class Hierarchy</a> &nbsp; <a class="qindex" href="annotated.html">Compound List</a> &nbsp; <a class="qindex" href="files.html">File List</a> &nbsp; <a class="qindex" href="functions.html">Compound Members</a> &nbsp; </center>
<hr><h1>Main.cpp</h1><div class="fragment"><pre>00001 <span class="preprocessor">#include "mpi.h"</span>
00002 <span class="preprocessor">#include "obflib.h"</span>
00003 <span class="preprocessor">#include "SectorMap.h"</span>
00004 <span class="preprocessor">#include "Pic.h"</span>
00005 <span class="preprocessor">#include "TImpedance.h"</span>
00006 
00007 <span class="comment">//-------- Input variables:---------------------</span>
00008 
<a name="l00013"></a><a class="code" href="group__Particles.html#a0">00013</a> <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#a0">NPIC</a>; 
<a name="l00014"></a><a class="code" href="group__Particles.html#a1">00014</a> <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#a1">NX</a>;   
<a name="l00015"></a><a class="code" href="group__Particles.html#a2">00015</a> <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#a2">NY</a>;   
<a name="l00016"></a><a class="code" href="group__Particles.html#a3">00016</a> <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#a3">NZ</a>;   
<a name="l00017"></a><a class="code" href="group__Particles.html#a4">00017</a> <span class="keywordtype">int</span> <a class="code" href="group__Particles.html#a4">NZ_bunch</a>=<a class="code" href="group__Particles.html#a3">NZ</a>/2;  
00018 
00019 
<a name="l00024"></a><a class="code" href="group__Lattice.html#a0">00024</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a0">piperadius</a>;   
<a name="l00025"></a><a class="code" href="group__Lattice.html#a1">00025</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a1">circum</a>;       
<a name="l00026"></a><a class="code" href="group__Lattice.html#a2">00026</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a2">gamma_t</a>;      
<a name="l00027"></a><a class="code" href="group__Lattice.html#a4">00027</a> <span class="keywordtype">double</span> CF_advance_h, <a class="code" href="group__Lattice.html#a4">CF_advance_v</a>; 
<a name="l00028"></a><a class="code" href="group__Lattice.html#a5">00028</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a5">CF_R</a>=0.0; 
<a name="l00029"></a><a class="code" href="group__Lattice.html#a6">00029</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a6">CF_length</a>; 
<a name="l00030"></a><a class="code" href="group__Lattice.html#a7">00030</a> <span class="keywordtype">int</span> <a class="code" href="group__Lattice.html#a7">NCF</a>=32;     
<a name="l00031"></a><a class="code" href="group__Lattice.html#a8">00031</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a8">koct</a>=8.0;  
<a name="l00032"></a><a class="code" href="group__Lattice.html#a9">00032</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a9">dQxm</a>=-0.15; 
<a name="l00033"></a><a class="code" href="group__Lattice.html#a10">00033</a> <span class="keywordtype">double</span> <a class="code" href="group__Lattice.html#a10">dQym</a>=-0.15; 
<a name="l00034"></a><a class="code" href="group__Lattice.html#a12">00034</a> <span class="keywordtype">double</span> dqx_detune=0.04, <a class="code" href="group__Lattice.html#a12">dqy_detune</a>=0.04; 
00035 
00036 
<a name="l00041"></a><a class="code" href="group__Simulation.html#a0">00041</a> <span class="keywordtype">char</span> <a class="code" href="group__Simulation.html#a0">ausgabe</a>[50];  
<a name="l00042"></a><a class="code" href="group__Simulation.html#a1">00042</a> <span class="keywordtype">int</span> <a class="code" href="group__Simulation.html#a1">pic_subset</a>;    
<a name="l00043"></a><a class="code" href="group__Simulation.html#a2">00043</a> <span class="keywordtype">int</span> <a class="code" href="group__Simulation.html#a2">cells</a>;         
<a name="l00044"></a><a class="code" href="group__Simulation.html#a3">00044</a> <span class="keywordtype">int</span> <a class="code" href="group__Simulation.html#a3">print_cell</a>=120;  
00045 
00046 
00047 
<a name="l00052"></a><a class="code" href="group__Beam.html#a0">00052</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a0">e_kin</a>; 
<a name="l00053"></a><a class="code" href="group__Beam.html#a1">00053</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a1">Z</a>;     
<a name="l00054"></a><a class="code" href="group__Beam.html#a2">00054</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a2">A</a>;      
<a name="l00055"></a><a class="code" href="group__Beam.html#a3">00055</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a3">current</a>;  
<a name="l00056"></a><a class="code" href="group__Beam.html#a4">00056</a> <span class="keywordtype">int</span> <a class="code" href="group__Beam.html#a4">init_pic_xy</a>;  
<a name="l00057"></a><a class="code" href="group__Beam.html#a5">00057</a> <span class="keywordtype">int</span> <a class="code" href="group__Beam.html#a5">init_pic_z</a>;  
<a name="l00058"></a><a class="code" href="group__Beam.html#a6">00058</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a6">momentum_spread</a>;  
<a name="l00059"></a><a class="code" href="group__Beam.html#a8">00059</a> <span class="keywordtype">double</span> rms_emittance_x0,<a class="code" href="group__Beam.html#a8">rms_emittance_y0</a>;  
<a name="l00060"></a><a class="code" href="group__Beam.html#a10">00060</a> <span class="keywordtype">double</span> mismatch_x, <a class="code" href="group__Beam.html#a10">mismatch_y</a>;  
<a name="l00061"></a><a class="code" href="group__Beam.html#a11">00061</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a11">offcenter</a>=0.0;  
<a name="l00062"></a><a class="code" href="group__Beam.html#a12">00062</a> <span class="keywordtype">double</span> <a class="code" href="group__Beam.html#a12">bunchfactor</a>=1.0;  
00063 
00064 
<a name="l00069"></a><a class="code" href="group__Impedance.html#a0">00069</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a0">dqci</a>=0.0; 
<a name="l00070"></a><a class="code" href="group__Impedance.html#a1">00070</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a1">dqcr</a>=-0.15; 
<a name="l00071"></a><a class="code" href="group__Impedance.html#a2">00071</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a2">Rs</a>=1.0e6;   
<a name="l00072"></a><a class="code" href="group__Impedance.html#a3">00072</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a3">nres</a>=10.0;   
<a name="l00073"></a><a class="code" href="group__Impedance.html#a4">00073</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a4">Qs</a>=1.0;       
<a name="l00074"></a><a class="code" href="group__Impedance.html#a5">00074</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a5">Zimage</a>=0.0;   
<a name="l00075"></a><a class="code" href="group__Impedance.html#a6">00075</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a6">leit</a>=1.0e6;   
<a name="l00076"></a><a class="code" href="group__Impedance.html#a7">00076</a> <span class="keywordtype">double</span> <a class="code" href="group__Impedance.html#a7">dwall</a>=0.0003;  
00077 
00078 
00079 
<a name="l00084"></a><a class="code" href="group__Other.html#a0">00084</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a0">madx_input_file</a>=0;  
<a name="l00085"></a><a class="code" href="group__Other.html#a1">00085</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a1">space_charge</a>=3;   
<a name="l00086"></a><a class="code" href="group__Other.html#a2">00086</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a2">imp_kick</a>=1;      
<a name="l00087"></a><a class="code" href="group__Other.html#a3">00087</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a3">sliced</a>=0;   
<a name="l00088"></a><a class="code" href="group__Other.html#a4">00088</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a4">cavity</a>=0; 
<a name="l00089"></a><a class="code" href="group__Other.html#a5">00089</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a5">octupole_kick</a>=1; 
<a name="l00090"></a><a class="code" href="group__Other.html#a6">00090</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a6">ampdetun_kick</a>=0; 
<a name="l00091"></a><a class="code" href="group__Other.html#a7">00091</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a7">chroma</a>=0;   
<a name="l00092"></a><a class="code" href="group__Other.html#a8">00092</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a8">bc_end</a>=1;        
<a name="l00093"></a><a class="code" href="group__Other.html#a9">00093</a> <span class="keywordtype">int</span> <a class="code" href="group__Other.html#a9">footprint</a>=0;        
00094 
00095 
00096 
<a name="l00101"></a><a class="code" href="group__Diagnostics.html#a0">00101</a> <span class="keywordtype">int</span> <a class="code" href="group__Diagnostics.html#a0">btf</a>=0;             
<a name="l00102"></a><a class="code" href="group__Diagnostics.html#a1">00102</a> <span class="keywordtype">int</span> <a class="code" href="group__Diagnostics.html#a1">btf_harmonic</a>=0;    
00103 
00104 
00105 
00106 
00107 <span class="comment">//-------------------end input ---------------------------</span>
00108 
00109 <span class="comment">// loading input from cfg file:</span>
00110 
00111 <span class="keywordtype">void</span> input_from_file(string filename)
00112 {
00113  <span class="keywordtype">char</span> dummy_string[80] ;
00114   FILE  *cfg_file_ptr ;
00115   <span class="keywordtype">long</span>  i, condition ;
00116   string cfg_filename=filename + <span class="stringliteral">".cfg"</span>; 
00117 
00118   cfg_file_ptr = fopen (cfg_filename.c_str(),<span class="stringliteral">"r"</span>) ;
00119   <span class="keywordflow">if</span> (cfg_file_ptr == NULL)
00120      { printf (<span class="stringliteral">"\n\n    Configuration-file does not exist.\n"</span>); 
00121        exit(0); }
00122 
00123   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);     
00124   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#a0">NPIC</a>); 
00125   
00126   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);     
00127   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#a1">NX</a>);
00128   
00129   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);
00130   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#a2">NY</a>) ;
00131   
00132   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);  
00133   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#a3">NZ</a>) ;
00134   
00135   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);  
00136   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Particles.html#a4">NZ_bunch</a>) ;
00137   
00138   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);  
00139   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Simulation.html#a2">cells</a>);
00140   
00141   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);  
00142   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a0">e_kin</a>);
00143   
00144   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);  
00145   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a1">Z</a>);
00146   
00147   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                         
00148   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a2">A</a>);
00149   
00150   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                        
00151   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a3">current</a>) ;
00152   
00153   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                          
00154   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a0">piperadius</a>);
00155   
00156   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                    
00157   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a1">circum</a>) ;
00158   
00159   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00160   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a2">gamma_t</a>) ;
00161   
00162   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00163   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;CF_advance_h);
00164   
00165   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00166   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a4">CF_advance_v</a>);
00167   
00168   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00169   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a5">CF_R</a>);
00170   
00171   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00172   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a6">CF_length</a>);
00173   
00174   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00175   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>, &amp;<a class="code" href="group__Lattice.html#a7">NCF</a>);
00176   
00177   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00178   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a8">koct</a>);
00179   
00180   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00181   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a9">dQxm</a>);
00182   
00183   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00184   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a10">dQym</a>);
00185   
00186   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00187   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;dqx_detune);
00188   
00189   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00190   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Lattice.html#a12">dqy_detune</a>);
00191   
00192   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00193   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Simulation.html#a1">pic_subset</a>) ;
00194   
00195   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);             
00196   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Beam.html#a4">init_pic_xy</a>);
00197   
00198   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00199   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Beam.html#a5">init_pic_z</a>) ;
00200   
00201   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00202   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a6">momentum_spread</a>);
00203   
00204   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);               
00205   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;rms_emittance_x0) ;
00206   
00207   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);              
00208   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a8">rms_emittance_y0</a>) ;
00209   
00210   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);               
00211   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;mismatch_x);
00212   
00213   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                
00214   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a10">mismatch_y</a>);
00215   
00216   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00217   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a11">offcenter</a>);
00218   
00219   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00220   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Beam.html#a12">bunchfactor</a>);
00221   
00222   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00223   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a0">dqci</a>);
00224   
00225   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00226   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a1">dqcr</a>);
00227   
00228   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00229   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a2">Rs</a>);
00230   
00231   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00232   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a3">nres</a>);
00233   
00234   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00235   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a4">Qs</a>);
00236   
00237   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00238   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a6">leit</a>);
00239   
00240   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00241   fscanf(cfg_file_ptr,<span class="stringliteral">"%lf"</span>,&amp;<a class="code" href="group__Impedance.html#a5">Zimage</a>);
00242   
00243   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00244   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a0">madx_input_file</a>);
00245   
00246   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00247   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a1">space_charge</a>);
00248   
00249   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00250   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a2">imp_kick</a>);
00251   
00252   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00253   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a3">sliced</a>);
00254   
00255   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00256   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a4">cavity</a>);
00257   
00258   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00259   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a5">octupole_kick</a>);
00260   
00261   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00262   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a6">ampdetun_kick</a>);
00263   
00264   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00265   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a7">chroma</a>);
00266   
00267   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00268   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a8">bc_end</a>);
00269   
00270   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00271   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Simulation.html#a3">print_cell</a>);
00272   
00273   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00274   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Other.html#a9">footprint</a>);
00275   
00276   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00277   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Diagnostics.html#a0">btf</a>);
00278   
00279   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);         
00280   fscanf(cfg_file_ptr,<span class="stringliteral">"%d"</span>,&amp;<a class="code" href="group__Diagnostics.html#a1">btf_harmonic</a>);
00281   
00282   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,dummy_string);                  
00283   fscanf(cfg_file_ptr,<span class="stringliteral">"%s"</span>,<a class="code" href="group__Simulation.html#a0">ausgabe</a>);
00284   
00285   cout &lt;&lt; <span class="stringliteral">"Ausgabedatei:"</span> &lt;&lt; <a class="code" href="group__Simulation.html#a0">ausgabe</a> &lt;&lt; endl;
00286   
00287   fclose (cfg_file_ptr) ;
00288 
00289 }
00290 
00291 <span class="comment">// write output file for IDL plotting</span>
00292 
00293 <span class="keywordtype">void</span> print_IDL(string data_dir, <span class="keywordtype">int</span> numprocs, <span class="keywordtype">double</span> cell_length, <span class="keywordtype">int</span> Nelements)
00294 {
00295  string idl_data=data_dir + <span class="stringliteral">"idl.dat"</span>;
00296  
00297  FILE *out=fopen(idl_data.c_str(),<span class="stringliteral">"w"</span>);
00298 
00299  fprintf(out,<span class="stringliteral">"%d\n"</span>,numprocs);
00300  fprintf(out,<span class="stringliteral">"%g\n"</span>,e_kin);  
00301  fprintf(out,<span class="stringliteral">"%g\n"</span>,Z); 
00302  fprintf(out,<span class="stringliteral">"%g\n"</span>,A);  
00303  fprintf(out,<span class="stringliteral">"%g\n"</span>,current);  
00304  fprintf(out,<span class="stringliteral">"%g\n"</span>,circum);
00305  fprintf(out,<span class="stringliteral">"%d\n"</span>,Nelements);
00306  fprintf(out,<span class="stringliteral">"%g\n"</span>,cell_length);  
00307  fprintf(out,<span class="stringliteral">"%d\n"</span>,pic_subset); 
00308  fprintf(out,<span class="stringliteral">"%g\n"</span>,piperadius);
00309  fprintf(out,<span class="stringliteral">"%d\n"</span>,NX);
00310  fprintf(out,<span class="stringliteral">"%d\n"</span>,NY); 
00311  fprintf(out,<span class="stringliteral">"%d\n"</span>,NZ); 
00312  
00313  fflush(out);
00314  fclose(out);
00315 }
00316 
00317 
00318 <span class="comment">// main part of the Simulation:</span>
00319 
00320 main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
00321 {
00322 
00323  <span class="comment">// MPI:</span>
00324  
00325  <span class="keywordtype">int</span> numprocs, myid, namelen;
00326  <span class="keywordtype">char</span> processor_name[MPI_MAX_PROCESSOR_NAME];
00327 
00328  MPI_Init(&amp;argc,&amp;argv);
00329  MPI_Comm_size(MPI_COMM_WORLD,&amp;numprocs);
00330  MPI_Comm_rank(MPI_COMM_WORLD,&amp;myid); 
00331 
00332  MPI_Get_processor_name(processor_name,&amp;namelen);
00333  fprintf(stderr,<span class="stringliteral">"Process %d running on %s\n"</span>, myid, processor_name); 
00334 
00335  string numbers=<span class="stringliteral">"0123456789"</span>;   <span class="comment">// !!!!! np &lt;= 10</span>
00336  string myid_str(numbers,myid,1);
00337  
00338  MPI_Status status;
00339  
00340  <span class="comment">// define a new MPI data type for particles</span>
00341  MPI_Datatype particletype;
00342  MPI_Type_contiguous(18,MPI_DOUBLE,&amp;particletype); <span class="comment">// !!! 14-&gt;18 changed</span>
00343  MPI_Type_commit(&amp;particletype); 
00344 
00345 <span class="comment">// read input file:</span>
00346  
00347  <span class="keywordflow">if</span>(argv[1]==0) { printf(<span class="stringliteral">"No input file name !\n"</span>); exit(0); }
00348 
00349  input_from_file(argv[1]);
00350  
00351  <span class="comment">// Synchronous particle:</span>
00352 
00353  <a class="code" href="structSynParticle.html">SynParticle</a> SP;
00354  SP.<a class="code" href="structSynParticle.html#m0">Z</a>=<a class="code" href="group__Beam.html#a1">Z</a>;
00355  SP.<a class="code" href="structSynParticle.html#m1">A</a>=<a class="code" href="group__Beam.html#a2">A</a>;
00356  SP.<a class="code" href="structSynParticle.html#m3">gamma0</a> = 1.0 + (<a class="code" href="group__Beam.html#a0">e_kin</a>*1e6*qe)/(mp*clight*clight) ;
00357  SP.<a class="code" href="structSynParticle.html#m2">beta0</a>  = sqrt((SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>*SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>-1.0)/(SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>*SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>)) ;
00358  SP.<a class="code" href="structSynParticle.html#m4">eta0</a> = 1.0/pow(gamma_t,2)-1.0/pow(SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>,2);
00359 
00360  <span class="comment">// Other variables:</span>
00361 
00362  string data_dir=ausgabe;
00363  data_dir=data_dir + <span class="stringliteral">"/"</span>; 
00364 
00365  <span class="keywordtype">double</span> dx=2.0*piperadius/(NX-1.0); <span class="comment">// needed for Poisson solver and grids</span>
00366  <span class="keywordtype">double</span> dy=2.0*piperadius/(NY-1.0); <span class="comment">// needed for Poisson solver and grids</span>
00367  <span class="keywordtype">double</span> dz=circum/NZ;
00368  <span class="keywordtype">double</span> ds=0.4;  <span class="comment">// value needed here only for setting dxs, dys.  </span>
00369  <span class="keywordtype">double</span> dxs=4.0*(dx/ds)/(NX-1.0);    <span class="comment">// only for plotting xs, not for tracking</span>
00370  <span class="keywordtype">double</span> dys=4.0*(dx/ds)/(NX-1.0);    <span class="comment">// only for plotting ys, not for tracking</span>
00371  <span class="keywordtype">double</span> charge=current*circum/(NPIC*SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*qe); <span class="comment">// macro-particle charge Q/e</span>
00372  <span class="keywordtype">double</span> zm=0.5*circum*bunchfactor; <span class="comment">// (initial) bunch length</span>
00373  if ( init_pic_z == 1 || init_pic_z == 3 || init_pic_z == 4 || init_pic_z == 6) zm=1.5*0.5*circum*bunchfactor; <span class="comment">// for parabolic bunch</span>
00374  <span class="keywordtype">double</span> zm1=-zm;   <span class="comment">// left bunch boundary</span>
00375  <span class="keywordtype">double</span> zm2=zm;    <span class="comment">// right bunch boundary</span>
00376  
00377  <span class="comment">// open output file:</span>
00378 
00379  string outfile= data_dir + <span class="stringliteral">"patric.dat"</span>;   <span class="comment">// changed from ppic.dat to patric.dat !!!!</span>
00380  FILE *out=fopen(outfile.c_str(),<span class="stringliteral">"w"</span>);
00381   
00382  <span class="comment">// init random number generator:</span>
00383 
00384  <span class="keywordtype">long</span> d=-11*(myid+1);  <span class="comment">// was -1021  transverse distribution: each slice needs a different initialization !</span>
00385  <span class="keywordtype">long</span> dl=-103;           <span class="comment">// was -103   longitudinal plane: same random set needed</span>
00386  <span class="keywordtype">long</span> dran=-101;         <span class="comment">// for BTF noise excitation: same random sets needed</span>
00387 
00388  <span class="comment">//-------Init Lattice-------</span>
00389 
00390  <a class="code" href="classBeamLine.html">BeamLine</a> lattice;
00391  
00392  <span class="comment">// init CF submap:</span>
00393  <a class="code" href="classSectorMap.html">SectorMap</a> CF(CF_advance_h/NCF,CF_advance_v/NCF,CF_R,CF_length/NCF,SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>);
00394  <span class="comment">// init cell:</span>
00395  <a class="code" href="classBeamLine.html">BeamLine</a> CF_cell;
00396  <span class="keywordflow">for</span>( <span class="keywordtype">int</span> j=0; j&lt;<a class="code" href="group__Lattice.html#a7">NCF</a>; j++)
00397    CF_cell.<a class="code" href="classBeamLine.html#a17">add_map</a>(CF);
00398 
00399  <span class="keywordflow">if</span> ( <a class="code" href="group__Other.html#a0">madx_input_file</a> == 1 )
00400   lattice.<a class="code" href="classBeamLine.html#a4">init</a>(<span class="stringliteral">"../mad"</span>);  
00401  <span class="keywordflow">else</span> 
00402   lattice.<a class="code" href="classBeamLine.html#a4">init</a>(CF_cell);
00403  
00404  <span class="keywordtype">double</span> cell_length=lattice.<a class="code" href="classBeamLine.html#a9">get_L</a>();
00405  <span class="keywordtype">int</span> Nelements=lattice.<a class="code" href="classBeamLine.html#a8">get_size</a>();
00406  cout &lt;&lt; <span class="stringliteral">"Nelements:"</span> &lt;&lt; Nelements &lt;&lt; endl;
00407  
00408  list&lt;SectorMap&gt;::iterator first_elem=lattice.<a class="code" href="classBeamLine.html#a11">get_first_element</a>();
00409  list&lt;SectorMap&gt;::iterator last_elem=lattice.<a class="code" href="classBeamLine.html#a12">get_end_element</a>();
00410  last_elem--; 
00411 
00412  <span class="comment">// machine tunes from lattice</span>
00413  <span class="keywordtype">double</span> tunex;  
00414  <span class="keywordtype">double</span> tuney;
00415  lattice.<a class="code" href="classBeamLine.html#a18">phase_advance</a>(tunex,tuney);
00416  
00417  <span class="keywordflow">if</span> (myid == 0) cout &lt;&lt; <span class="stringliteral">"advancex: "</span> &lt;&lt; tunex*180.0/PI &lt;&lt; endl;
00418  
00419  tunex=<a class="code" href="group__Lattice.html#a1">circum</a>/cell_length*tunex/(2.0*PI); 
00420  tuney=<a class="code" href="group__Lattice.html#a1">circum</a>/cell_length*tuney/(2.0*PI); 
00421  <span class="keywordflow">if</span> (myid == 0) cout &lt;&lt; <span class="stringliteral">"tunex0: "</span> &lt;&lt; tunex &lt;&lt; endl;     
00422  
00423  <span class="comment">// Chromatic correction kick:</span>
00424  Chrom Chrom0(tunex,tuney,circum/(2.0*PI)); 
00425  
00426  <span class="comment">// Octupole:</span>
00427  Octupole Oct0(koct);
00428  
00429  <span class="comment">// Amplitude detuning</span>
00430  AmplitudeDetuning Amp0(tunex,tuney,dqx_detune/(1.0e-6*rms_emittance_x0),dqy_detune/(1.0e-6*rms_emittance_y0),circum/(2.0*PI),CF);
00431  
00432  <span class="comment">// set matched RF voltage:</span>
00433 
00434  <span class="keywordtype">int</span> linrf=0;
00435  <span class="keywordflow">if</span> (<a class="code" href="group__Other.html#a4">cavity</a> == 3) linrf = 1;  
00436 
00437  <span class="keywordtype">double</span> Ym=<a class="code" href="group__Lattice.html#a1">circum</a>/(2.0*PI)*(1.0-cos(2.0*PI*zm/circum));  
00438  <span class="keywordflow">if</span> (linrf == 1) Ym=<a class="code" href="group__Lattice.html#a1">circum</a>/(2.0*PI)*0.5*pow(2.0*PI*zm/circum,2);  
00439  <span class="keywordtype">double</span> velm=abs(SP.<a class="code" href="structSynParticle.html#m4">eta0</a>)*SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*sqrt(5.0)*<a class="code" href="group__Beam.html#a6">momentum_spread</a>*2.0*PI/(circum);
00440  <span class="keywordtype">double</span> fsyn=1.0/(2.0*PI)*velm*sqrt(circum/(2.0*PI))/sqrt(2.0*Ym);
00441  <span class="keywordtype">double</span> V0rf=pow(2.0*PI*fsyn,2)*pow(circum,2)/(2.0*PI)*mp*SP.<a class="code" href="structSynParticle.html#m1">A</a>*SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>/(qe*SP.<a class="code" href="structSynParticle.html#m0">Z</a>*abs(SP.<a class="code" href="structSynParticle.html#m4">eta0</a>));
00442                  
00443  <span class="keywordflow">if</span>(myid == 0) cout &lt;&lt; <span class="stringliteral">"Vrf [kV]: "</span> &lt;&lt; V0rf*1.0e-3 &lt;&lt; <span class="stringliteral">"  fsyn [kHz]: "</span> &lt;&lt; fsyn*1.0e-3 &lt;&lt; endl;           
00444             
00445  <span class="comment">//--------end lattice----------</span>
00446  
00447  
00448  <span class="comment">// print IDL parameter file:</span>
00449  
00450  <span class="keywordflow">if</span>( myid == 0 )
00451     print_IDL(data_dir,numprocs,cell_length,Nelements);
00452 
00453  <span class="comment">// Init 2D transverse grids:</span>
00454  
00455  Grid2D rho_xy(NX,NY,dx,dy,data_dir + <span class="stringliteral">"rho_xy.dat"</span>); 
00456  Grid2D rho_xy_tmp(NX,NY,dx,dy);
00457  Grid2D xxs(NX,NX,dx,dxs,data_dir + <span class="stringliteral">"xxs.dat"</span>); 
00458  Grid2D xxs_tmp(NX,NX,dx,dxs);
00459  Grid2D yys(NY,NY,dy,dys,data_dir + <span class="stringliteral">"yys.dat"</span>); 
00460  Grid2D yys_tmp(NY,NY,dy,dys); 
00461  Grid2D xsys(NX,NY,dxs,dys,data_dir + <span class="stringliteral">"xsys.dat"</span>); 
00462  Grid2D xsys_tmp(NX,NY,dxs,dys);
00463  Grid2D zx(NZ,NX,dz,dx,data_dir + <span class="stringliteral">"zx.dat"</span>); 
00464  Grid2D zx_tmp(NZ,NX,dz,dx);
00465  
00466  Grid2D Ex(NX,NY,dx,dy,data_dir + <span class="stringliteral">"Ex.dat"</span>);
00467  Grid2D Ey(NX,NY,dx,dy,data_dir + <span class="stringliteral">"Ey.dat"</span>);
00468  
00469  <span class="comment">// Init particle distribution:</span>
00470 
00471  <a class="code" href="classPic.html">Pic</a> Pics(&amp;SP,charge,0,data_dir + <span class="stringliteral">"pics_"</span> + myid_str + <span class="stringliteral">".dat"</span>);
00472  Pics.<a class="code" href="classPic.html#m0">z1</a>=zm1+myid*(zm2-zm1)/numprocs;  <span class="comment">// left boundary in z for this slice</span>
00473  Pics.<a class="code" href="classPic.html#m1">z2</a>=Pics.<a class="code" href="classPic.html#m0">z1</a>+(zm2-zm1)/numprocs;   <span class="comment">// right boundary</span>
00474  <span class="keywordflow">if</span> (myid==0) 
00475         Pics.<a class="code" href="classPic.html#m0">z1</a>=-0.5*<a class="code" href="group__Lattice.html#a1">circum</a>;    
00476  <span class="keywordflow">if</span> (myid==numprocs-1)
00477     Pics.<a class="code" href="classPic.html#m1">z2</a>=0.5*<a class="code" href="group__Lattice.html#a1">circum</a>;
00478  <span class="keywordtype">double</span> slice_length=Pics.<a class="code" href="classPic.html#m1">z2</a>-Pics.<a class="code" href="classPic.html#m0">z1</a>;  
00479 
00480  <span class="comment">// Init longitudinal grids</span>
00481  
00482   Grid1D rho_z_tmp(NZ,dz,-0.5*circum);
00483   Grid1D rho_z(NZ,dz,-0.5*circum,data_dir + <span class="stringliteral">"rho_z.dat"</span>);
00484   Grid1D dipole_current_x_tmp(NZ,dz,-0.5*circum);
00485   Grid1D dipole_current_x(NZ,dz,-0.5*circum,data_dir + <span class="stringliteral">"dipole_x.dat"</span>);
00486   Grid1D dipole_current_xs_tmp(NZ,dz,-0.5*circum);
00487   Grid1D dipole_current_xs(NZ,dz,-0.5*circum);
00488   Grid1D dipole_kick_x(NZ,dz,-0.5*circum,data_dir + <span class="stringliteral">"dipole_kick_x.dat"</span>);
00489   Grid1D dipole_current_y_tmp(NZ,dz,-0.5*circum);
00490   Grid1D dipole_current_y(NZ,dz,-0.5*circum,data_dir + <span class="stringliteral">"dipole_y.dat"</span>);
00491   
00492  <span class="comment">// Init 3D sliced grids (for 3D space charge calculation)</span>
00493 
00494   <span class="keywordflow">if</span> ( fmod((<span class="keywordtype">float</span>)NZ_bunch,(<span class="keywordtype">float</span>)numprocs) != 0.0) 
00495          { cout &lt;&lt; <span class="stringliteral">"NZ_bunch kein Vielfaches von numprocs"</span> &lt;&lt; endl; exit(0); }  
00496   Grid3D rho_xyz(NZ_bunch/numprocs,Pics.<a class="code" href="classPic.html#m0">z1</a>,Pics.<a class="code" href="classPic.html#m1">z2</a>,rho_xy);
00497   Grid3D Ey3(NZ_bunch/numprocs,Pics.<a class="code" href="classPic.html#m0">z1</a>,Pics.<a class="code" href="classPic.html#m1">z2</a>,rho_xy);
00498   Grid3D Ex3(NZ_bunch/numprocs,Pics.<a class="code" href="classPic.html#m0">z1</a>,Pics.<a class="code" href="classPic.html#m1">z2</a>,rho_xy);
00499   
00500 
00501  <span class="comment">// set longitudinal distribution:</span>
00502 
00503  <span class="keywordflow">switch</span>(init_pic_z) {
00504  <span class="keywordflow">case</span> 0:   <span class="comment">//  coasting + Elliptic</span>
00505   Pics.<a class="code" href="classPic.html#a10">parabolic_dc</a>(2.0/3.0*bunchfactor*circum,sqrt(5.0)*momentum_spread,NPIC,&amp;dl);
00506   <span class="keywordflow">break</span>;
00507  <span class="keywordflow">case</span> 1:   <span class="comment">//  bunch + Elliptic  (1.5 correction factor for bunching)</span>
00508   Pics.<a class="code" href="classPic.html#a9">parabolic</a>(0.0,zm,sqrt(5.0)*momentum_spread,NPIC,&amp;dl);
00509   <span class="keywordflow">break</span>;
00510  <span class="keywordflow">case</span> 2:   <span class="comment">//  coasting + Gauss</span>
00511   Pics.<a class="code" href="classPic.html#a12">coasting_beam</a>(NPIC,bunchfactor*circum,&amp;dl);
00512   Pics.<a class="code" href="classPic.html#a11">gaussz</a>(momentum_spread,&amp;d);  
00513   <span class="keywordflow">break</span>;  
00514  <span class="keywordflow">case</span> 3:   <span class="comment">//  bunch + Gauss</span>
00515   Pics.<a class="code" href="classPic.html#a13">bunch_gauss</a>(zm/sqrt(5.0),momentum_spread,NPIC,circum,&amp;dl);
00516   Pics.<a class="code" href="classPic.html#a11">gaussz</a>(momentum_spread,&amp;d);
00517   <span class="keywordflow">break</span>;  
00518  <span class="keywordflow">case</span> 4:   <span class="comment">//  const. bunch dist. </span>
00519   Pics.<a class="code" href="classPic.html#a14">bunch_const</a>(zm,sqrt(5.0)*momentum_spread,linrf,circum,NPIC,&amp;dl);
00520   <span class="keywordflow">break</span>;  
00521  <span class="keywordflow">case</span> 5:   <span class="comment">//  air bag dist. </span>
00522   Pics.<a class="code" href="classPic.html#a15">barrier_air_bag</a>(zm,sqrt(5.0)*momentum_spread,NPIC,&amp;dl);
00523   <span class="keywordflow">break</span>;
00524  <span class="keywordflow">case</span> 6:   <span class="comment">//  bunch air bag dist. </span>
00525   Pics.<a class="code" href="classPic.html#a16">bunch_air_bag</a>(zm,sqrt(5.0)*momentum_spread,circum,NPIC,&amp;dl);
00526   <span class="keywordflow">break</span>;
00527  <span class="keywordflow">default</span>:
00528   printf(<span class="stringliteral">"Wrong PIC Initalization\n"</span>);
00529   exit(0);
00530  }
00531 
00532 
00533  <span class="comment">// set transverse distribution:</span>
00534 
00535  <a class="code" href="structTwissP.html">TwissP</a> twiss0; 
00536  lattice.<a class="code" href="classBeamLine.html#a14">first_element</a>();
00537  twiss0=last_elem-&gt;get_twiss();
00538  
00539  <span class="keywordtype">double</span> Ds0=0.0; <span class="comment">// Dispersion derivative</span>
00540 
00541  <span class="keywordflow">switch</span>(init_pic_xy) {
00542  <span class="keywordflow">case</span> 0:   <span class="comment">//  Waterbag </span>
00543   Pics.<a class="code" href="classPic.html#a5">waterbag_xy</a>(6.0e-6*rms_emittance_x0,
00544                    6.0e-6*rms_emittance_y0,
00545                    twiss0.<a class="code" href="structTwissP.html#m2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#m3">alpy</a>,
00546                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#m0">betx</a>,
00547                    pow(mismatch_y,2)*twiss0.<a class="code" href="structTwissP.html#m1">bety</a>,
00548                    twiss0.<a class="code" href="structTwissP.html#m4">Dx</a>,Ds0,
00549                    offcenter, circum, zm,chroma,tunex,
00550                    &amp;d);
00551  
00552   <span class="keywordflow">break</span>;
00553  <span class="keywordflow">case</span> 1:   <span class="comment">//  KV </span>
00554   Pics.<a class="code" href="classPic.html#a6">KV_xy</a>(4.0e-6*rms_emittance_x0,
00555              4.0e-6*rms_emittance_y0,
00556                    twiss0.<a class="code" href="structTwissP.html#m2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#m3">alpy</a>,
00557                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#m0">betx</a>,
00558                    pow(mismatch_y,2)*twiss0.<a class="code" href="structTwissP.html#m1">bety</a>,
00559                    twiss0.<a class="code" href="structTwissP.html#m4">Dx</a>,Ds0,offcenter,nres,circum,zm,chroma,tunex,&amp;d); <span class="comment">// nres, circum added !!!!!</span>
00560  
00561   <span class="keywordflow">break</span>;
00562  <span class="keywordflow">case</span> 2:   <span class="comment">//  Semi-Gauss</span>
00563   Pics.<a class="code" href="classPic.html#a7">SG</a>(4.0e-6*rms_emittance_x0,
00564           4.0e-6*rms_emittance_y0,
00565                    twiss0.<a class="code" href="structTwissP.html#m2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#m3">alpy</a>,
00566                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#m0">betx</a>,
00567                    pow(mismatch_y,2)*twiss0.<a class="code" href="structTwissP.html#m1">bety</a>,
00568                    twiss0.<a class="code" href="structTwissP.html#m4">Dx</a>,Ds0,offcenter,&amp;d);
00569  
00570   <span class="keywordflow">break</span>;
00571  <span class="keywordflow">case</span> 3:   <span class="comment">//  Gauss</span>
00572   Pics.<a class="code" href="classPic.html#a8">Gauss_xy</a>(1.0e-6*rms_emittance_x0,
00573                 1.0e-6*rms_emittance_y0,
00574                    twiss0.<a class="code" href="structTwissP.html#m2">alpx</a>,twiss0.<a class="code" href="structTwissP.html#m3">alpy</a>,
00575                    pow(mismatch_x,2)*twiss0.<a class="code" href="structTwissP.html#m0">betx</a>,
00576                    pow(mismatch_y,2)*twiss0.<a class="code" href="structTwissP.html#m1">bety</a>,
00577                    twiss0.<a class="code" href="structTwissP.html#m4">Dx</a>,Ds0,offcenter,&amp;d);
00578  
00579   <span class="keywordflow">break</span>;
00580   <span class="keywordflow">default</span>:
00581   printf(<span class="stringliteral">"Wrong PIC Initalization\n"</span>);
00582   exit(0);
00583  }
00584 
00585 
00586  <span class="comment">//----------------simulation loop--------------------------</span>
00587 
00588  
00589  <span class="keywordtype">int</span> Nexchange=1; <span class="comment">// was Nelements; !!! // exchange of particles between slices every element </span>
00590  <span class="keywordtype">int</span> Nprint=<a class="code" href="group__Simulation.html#a3">print_cell</a>*Nelements; <span class="comment">// output of particles every cell</span>
00591  <span class="keywordtype">int</span> Nibs=1; <span class="comment">// Nelements; // correct for IBS every Nibs steps</span>
00592  
00593  <span class="comment">// counters and other variables:</span>
00594  
00595  <span class="keywordtype">double</span> Ntot; <span class="comment">// total number of particles: for screen output</span>
00596  <span class="keywordtype">int</span> counter=0;  <span class="comment">// counts sub-elements</span>
00597  <span class="keywordtype">double</span> s=0.0;  
00598  <span class="keywordtype">double</span> Nslice; <span class="comment">// total number of slices</span>
00599  <span class="keywordtype">double</span> emitx;  <span class="comment">// emittance: for screen output</span>
00600  <span class="keywordtype">double</span> dtheta=0.0;  <span class="comment">// btf dipole kick</span>
00601  <span class="keywordtype">double</span> pickup_h, pickup_v;    <span class="comment">// horizontal/vertical pickup signals</span>
00602  <span class="keywordtype">double</span> rms_advancex=0.0, rms_advancey=0.0;
00603  
00604  <span class="comment">// start loop (do...while)</span>
00605  
00606  <span class="keywordflow">do</span> {
00607      
00608       <span class="comment">// Output:</span>
00609        
00610       <span class="comment">// to ppic.dat every element:</span>
00611 
00612      <span class="keywordflow">if</span>( counter%1 == 0 ) 
00613       {
00614        <span class="keywordtype">double</span> *momenta=<span class="keyword">new</span> <span class="keywordtype">double</span>[17];
00615        <span class="keywordtype">double</span> *momenta_tot=<span class="keyword">new</span> <span class="keywordtype">double</span>[17];
00616        Nslice=Pics.<a class="code" href="classPic.html#a4">get_size</a>(); <span class="comment">// number of particles in this slice      </span>
00617        momenta[0]=Nslice*Pics.<a class="code" href="classPic.html#a18">rms_emittance_x</a>();  
00618        momenta[1]=Nslice*Pics.<a class="code" href="classPic.html#a19">rms_emittance_y</a>();
00619        momenta[2]=Nslice*Pics.<a class="code" href="classPic.html#a21">x_max</a>();
00620        momenta[3]=Nslice*Pics.<a class="code" href="classPic.html#a23">y_max</a>();
00621        momenta[4]=Nslice*Pics.<a class="code" href="classPic.html#a20">x_rms</a>();
00622        momenta[5]=Nslice*Pics.<a class="code" href="classPic.html#a22">y_rms</a>();
00623        momenta[6]=Nslice*Pics.<a class="code" href="classPic.html#a31">rms_momentum_spread</a>();
00624        momenta[7]=Nslice*Pics.<a class="code" href="classPic.html#a34">xzn</a>(2.0,zm);
00625        momenta[8]=Nslice*Pics.<a class="code" href="classPic.html#a34">xzn</a>(1.0,zm);
00626        momenta[9]=Nslice;  
00627        momenta[10]=Nslice*rms_advancex;  <span class="comment">// rms phase advance in x</span>
00628        momenta[11]=Nslice*rms_advancey;
00629        momenta[12]=Nslice*Pics.<a class="code" href="classPic.html#a35">offset_x</a>();
00630        momenta[13]=Nslice*Pics.<a class="code" href="classPic.html#a36">offset_y</a>();
00631        momenta[14]=Nslice*dtheta;          <span class="comment">// btf noise signal</span>
00632        momenta[15]=Nslice*pickup_h; 
00633        momenta[16]=Nslice*pickup_v; 
00634        <span class="comment">//momenta[14]=Nslice*Pics.entropy(xsys);</span>
00635        <span class="comment">// mpi_reduce for summation of all 17 moments over all slices</span>
00636        MPI_Reduce(momenta,momenta_tot,17,
00637                   MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
00638         
00639        Ntot=momenta_tot[9];        <span class="comment">// total number of particles over all slices </span>
00640        <span class="comment">// !!!! stop when more than 5% are lost:</span>
00641        <span class="keywordflow">if</span> ( myid==0  &amp;&amp; Ntot/<a class="code" href="group__Particles.html#a0">NPIC</a> &lt;= 0.95 ) 
00642          { cout &lt;&lt; <span class="stringliteral">"lost more than 5 percent. exit!"</span> &lt;&lt; endl; MPI_Abort(MPI_COMM_WORLD,0); } 
00643     
00644        <span class="comment">//momenta_tot[9]=2.0*Ntot; </span>
00645        
00646        emitx=momenta_tot[0]/Ntot;  <span class="comment">// total rms emittance</span>
00647        
00648        <span class="comment">// momenta to ppic.dat</span>
00649        <span class="keywordflow">if</span>(myid == 0) {
00650             fprintf(out,<span class="stringliteral">"%g"</span>,s);
00651                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;17;i++) 
00652                  fprintf(out,<span class="stringliteral">"%15g"</span>,momenta_tot[i]/Ntot);
00653                fprintf(out,<span class="stringliteral">"\n"</span>);
00654                fflush(out);
00655        }
00656        <span class="keyword">delete</span> momenta;
00657        <span class="keyword">delete</span> momenta_tot; 
00658       }     
00659 
00660       
00661      <span class="comment">// output to screen and large files:</span>
00662  
00663      <span class="keywordflow">if</span>( counter%Nprint == 0  ) 
00664        {
00665         <span class="keywordflow">if</span>( myid == 0 )
00666          {
00667           printf(<span class="stringliteral">"saving at s=%g (m) eps_t=%g dp/p=%g zm2=%g Ntotal=%g\n"</span>,
00668             s,1.0e6*emitx,Pics.<a class="code" href="classPic.html#a31">rms_momentum_spread</a>(),zm2,Ntot);
00669           cout.flush();               
00670           
00671           Ex.print();
00672           Ey.print();
00673         
00674          }
00675          
00676         <span class="comment">// to pic.dat:</span>
00677 
00678         Pics.<a class="code" href="classPic.html#a17">print</a>(pic_subset);
00679                 
00680         <span class="comment">// collect densities for output only:</span>
00681         
00682         Pics.<a class="code" href="classPic.html#a65">gatherZ</a>(charge*qe/dz,rho_z_tmp);  
00683             Pics.<a class="code" href="classPic.html#a66">gatherX</a>(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*charge*qe/dz,dipole_current_x_tmp); 
00684             Pics.<a class="code" href="classPic.html#a68">gatherY</a>(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*charge*qe/dz,dipole_current_y_tmp);  
00685             Pics.<a class="code" href="classPic.html#a69">gatherXY</a>(charge*qe/circum,rho_xy_tmp);
00686         Pics.<a class="code" href="classPic.html#a71">gatherXXs</a>(charge*qe/circum,xxs_tmp);
00687         Pics.<a class="code" href="classPic.html#a73">gatherYYs</a>(charge*qe/circum,yys_tmp);
00688         Pics.<a class="code" href="classPic.html#a74">gatherXsYs</a>(charge*qe/circum,xsys_tmp); 
00689             Pics.<a class="code" href="classPic.html#a72">gatherZX</a>(charge*qe/circum,zx_tmp); 
00690         
00691         <span class="comment">// summation over all slices:</span>
00692         
00693         MPI_Allreduce(rho_z_tmp.get_grid(),rho_z.get_grid(),
00694                       <a class="code" href="group__Particles.html#a3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00695         MPI_Allreduce(dipole_current_x_tmp.get_grid(),dipole_current_x.get_grid(),
00696                       <a class="code" href="group__Particles.html#a3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00697         MPI_Allreduce(dipole_current_y_tmp.get_grid(),dipole_current_y.get_grid(),
00698                       <a class="code" href="group__Particles.html#a3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00699         MPI_Allreduce(rho_xy_tmp.get_grid(),rho_xy.get_grid(),
00700                       <a class="code" href="group__Particles.html#a1">NX</a>*<a class="code" href="group__Particles.html#a2">NY</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00701         MPI_Allreduce(xxs_tmp.get_grid(),xxs.get_grid(),
00702                       <a class="code" href="group__Particles.html#a1">NX</a>*<a class="code" href="group__Particles.html#a1">NX</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00703         MPI_Allreduce(yys_tmp.get_grid(),yys.get_grid(),
00704                       <a class="code" href="group__Particles.html#a2">NY</a>*<a class="code" href="group__Particles.html#a2">NY</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00705         MPI_Allreduce(xsys_tmp.get_grid(),xsys.get_grid(),
00706                       <a class="code" href="group__Particles.html#a1">NX</a>*<a class="code" href="group__Particles.html#a2">NY</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00707         MPI_Allreduce(zx_tmp.get_grid(),zx.get_grid(),
00708                       <a class="code" href="group__Particles.html#a3">NZ</a>*<a class="code" href="group__Particles.html#a1">NX</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00709                       
00710         <span class="comment">// output to density files:</span>
00711   
00712         <span class="keywordflow">if</span>( myid == 0 ) {
00713           dipole_current_x.print();
00714           dipole_kick_x.print();
00715           dipole_current_y.print();
00716           rho_z.print();
00717           rho_xy.print();
00718           xxs.print();
00719           yys.print();
00720           xsys.print();
00721           zx.print();}
00722        } 
00723 
00724     <span class="comment">// at beginning of a cell: calculate advance per (last) cell, store old coordinates </span>
00725 
00726      <span class="keywordflow">if</span>( lattice.<a class="code" href="classBeamLine.html#a10">get_element</a>() == first_elem  ) 
00727       {
00728         rms_advancex=Pics.<a class="code" href="classPic.html#a47">rms_phaseadvance_h</a>();    <span class="comment">//Pics.rms_wavelength_h();</span>
00729         rms_advancey=Pics.<a class="code" href="classPic.html#a48">rms_phaseadvance_v</a>();   <span class="comment">//Pics.rms_wavelength_v(); </span>
00730         <span class="keywordflow">if</span>(<a class="code" href="group__Other.html#a9">footprint</a> == 0) Pics.<a class="code" href="classPic.html#a44">store_old_coordinates</a>(); 
00731       }
00732 
00733      <span class="comment">// Transport particles through linear sectormap, update slice position s:</span>
00734      
00735      ds=lattice.<a class="code" href="classBeamLine.html#a10">get_element</a>()-&gt;get_L(); 
00736      s+=ds;
00737      Pics.<a class="code" href="classPic.html#a49">transport</a>(lattice.<a class="code" href="classBeamLine.html#a10">get_element</a>()-&gt;get_map(),<a class="code" href="group__Lattice.html#a0">piperadius</a>);
00738      
00739      <span class="comment">// exchange particles between slices:</span>
00740      
00741      <span class="keywordflow">if</span>( counter != 0 &amp;&amp; counter%Nexchange == 0 &amp;&amp; numprocs &gt; 1 ) 
00742        {
00743          <span class="keywordtype">int</span> destl; 
00744          <span class="keywordtype">int</span> destr; 
00745          <span class="keywordtype">int</span> Npl;   
00746          <span class="keywordtype">int</span> Npr;   
00747 
00748          <span class="comment">//---finite bunch: no exchange between ends---</span>
00749           <span class="keywordflow">if</span> (<a class="code" href="group__Other.html#a8">bc_end</a> == 0) {
00750            <span class="keywordflow">if</span>(myid == 0) {destl=-1; destr=myid+1;}
00751            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(myid == numprocs-1 ) {destl=myid-1; destr=-1;}
00752            <span class="keywordflow">else</span> { destl=myid-1; destr=myid+1; }
00753           }
00754          
00755          <span class="comment">//---periodic (in z) boundary condition--- </span>
00756           <span class="keywordflow">if</span> (<a class="code" href="group__Other.html#a8">bc_end</a> == 1) {
00757            <span class="keywordflow">if</span>(myid == 0) {destl=numprocs-1; destr=myid+1;}
00758            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(myid == numprocs-1 ) {destl=myid-1; destr=0;}
00759            <span class="keywordflow">else</span> { destl=myid-1; destr=myid+1;}
00760           }
00761           
00763          vector&lt;Particle&gt; pl, pr;
00764          
00765          <span class="comment">// send to neighbor slices:</span>
00766          
00767          <span class="keywordflow">if</span>( destl &gt;= 0 ) {
00768           pl=Pics.<a class="code" href="classPic.html#a75">get_particles_left</a>(circum);
00769           Npl=pl.size();
00770           MPI_Send(&amp;Npl,1,MPI_INT,destl,1,MPI_COMM_WORLD);
00771           MPI_Send(&amp;pl[0],Npl,particletype,destl,1,MPI_COMM_WORLD);}  
00772          <span class="keywordflow">if</span>( destr &gt;= 0 ) {
00773           pr=Pics.<a class="code" href="classPic.html#a76">get_particles_right</a>(circum);
00774           Npr=pr.size();
00775           MPI_Send(&amp;Npr,1,MPI_INT,destr,0,MPI_COMM_WORLD);
00776           MPI_Send(&amp;pr[0],Npr,particletype,destr,0,MPI_COMM_WORLD);} 
00777        
00778          <span class="comment">// receive from neighbour slices: </span>
00779           
00780          Npl=0; Npr=0;
00781          vector&lt;Particle&gt; pl_in, pr_in;
00782          <span class="keywordflow">if</span>( destl &gt;= 0 ) {   
00783           MPI_Recv(&amp;Npl,1,MPI_INT,destl,0,MPI_COMM_WORLD,&amp;status);
00784           pl_in=vector&lt;Particle&gt;(Npl);
00785           MPI_Recv(&amp;pl_in[0],Npl,particletype,destl,0,MPI_COMM_WORLD,&amp;status);}
00786          <span class="keywordflow">if</span>( destr &gt;= 0 ) {
00787           MPI_Recv(&amp;Npr,1,MPI_INT,destr,1,MPI_COMM_WORLD,&amp;status);
00788           pr_in=vector&lt;Particle&gt;(Npr);
00789           MPI_Recv(&amp;pr_in[0],Npr,particletype,destr,1,MPI_COMM_WORLD,&amp;status);}
00790          Pics.<a class="code" href="classPic.html#a77">add_particles</a>(pl_in);
00791          Pics.<a class="code" href="classPic.html#a77">add_particles</a>(pr_in);
00792          }
00793      
00794      <span class="comment">// periodic bc without exchange</span>
00795      <span class="keywordflow">if</span> (numprocs == 1)
00796       Pics.<a class="code" href="classPic.html#a78">periodic_bc</a>(circum);      
00797             
00798      <span class="comment">// update wave lengths</span>
00799      
00800      <span class="keywordflow">if</span> ( <a class="code" href="group__Other.html#a9">footprint</a> == 1 ) {
00801      Pics.<a class="code" href="classPic.html#a38">update_wavelength_h</a>(ds,0.0);
00802      Pics.<a class="code" href="classPic.html#a39">update_wavelength_v</a>(ds);}
00803      
00804      <span class="comment">// nonlinear thin lens kick:</span>
00805      <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a5">octupole_kick</a> == 1 ) 
00806         Pics.<a class="code" href="classPic.html#a50">kick</a>(Oct0,ds); 
00807 
00808      <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a6">ampdetun_kick</a> == 1 ) 
00809         Pics.<a class="code" href="classPic.html#a50">kick</a>(Amp0,ds);  
00810      
00811     <span class="comment">// correct for chromaticity</span>
00812      <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a7">chroma</a> == 1 ) 
00813         Pics.<a class="code" href="classPic.html#a50">kick</a>(Chrom0,ds); 
00814      
00815     <span class="comment">// cavity kick every cell:</span>
00816     
00817     <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a4">cavity</a> == 1 &amp;&amp; counter%Nelements==0.0 )
00818          Pics.<a class="code" href="classPic.html#a53">cavity_kick</a>(V0rf*cell_length/circum,1,circum/(2.0*PI));
00819     <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a4">cavity</a> == 2 &amp;&amp; counter%Nelements==0.0 )
00820          Pics.<a class="code" href="classPic.html#a55">barrier_kick</a>(zm1,zm2);
00821     <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a4">cavity</a> == 3 &amp;&amp; counter%Nelements==0.0 )
00822               Pics.<a class="code" href="classPic.html#a54">cavity_kick_linear</a>(V0rf*cell_length/circum,1,circum/(2.0*PI)); 
00823 
00824     <span class="comment">// Pickup signals</span>
00825     
00826        Pics.<a class="code" href="classPic.html#a66">gatherX</a>(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*charge*qe/dz,dipole_current_x_tmp);
00827        Pics.<a class="code" href="classPic.html#a68">gatherY</a>(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*charge*qe/dz,dipole_current_y_tmp);
00828        MPI_Allreduce(dipole_current_x_tmp.get_grid(),dipole_current_x.get_grid(),
00829                       <a class="code" href="group__Particles.html#a3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);    
00830        MPI_Allreduce(dipole_current_y_tmp.get_grid(),dipole_current_y.get_grid(),
00831                       <a class="code" href="group__Particles.html#a3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
00832       
00833        pickup_h=Pics.<a class="code" href="classPic.html#a63">pickup_signal</a>(dipole_current_x,circum,s/(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight))/<a class="code" href="group__Beam.html#a3">current</a>;
00834        pickup_v=Pics.<a class="code" href="classPic.html#a63">pickup_signal</a>(dipole_current_y,circum,s/(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight))/<a class="code" href="group__Beam.html#a3">current</a>;
00835 
00836        
00837     <span class="comment">// impedance kicks</span>
00838     
00839     komplex dqc_t(dqcr,dqci); <span class="comment">// for sliced==0</span>
00840     
00841     <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a2">imp_kick</a> == 1 ) {
00842     <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a3">sliced</a> == 0 )   
00843        Pics.<a class="code" href="classPic.html#a50">kick</a>(ds/circum*InducedKick(Pics.<a class="code" href="classPic.html#a35">offset_x</a>(),ds,dqc_t,SP.<a class="code" href="structSynParticle.html#m2">beta0</a>,tunex,<a class="code" href="group__Lattice.html#a1">circum</a>),0.0);
00844     <span class="keywordflow">else</span> {
00845        dipole_kick_x.reset();       
00846        <span class="keywordflow">if</span> (<a class="code" href="group__Impedance.html#a2">Rs</a> &gt; 0.0 || <a class="code" href="group__Impedance.html#a6">leit</a> &gt; 0.0) 
00847          {
00848            Pics.<a class="code" href="classPic.html#a67">gatherXs</a>(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight*charge*qe/dz,dipole_current_xs_tmp);
00849            MPI_Allreduce(dipole_current_xs_tmp.get_grid(),dipole_current_xs.get_grid(),
00850                       <a class="code" href="group__Particles.html#a3">NZ</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);        
00851            InducedWakeKick(dipole_kick_x,dipole_current_x,dipole_current_xs,tunex,
00852                   2.0*PI*SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight/circum,nres,Rs,Qs,piperadius,leit,SP.<a class="code" href="structSynParticle.html#m2">beta0</a>,
00853                   SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>*mp*SP.<a class="code" href="structSynParticle.html#m1">A</a>*pow(clight,2),SP.<a class="code" href="structSynParticle.html#m0">Z</a>*qe); 
00854          }
00855        <span class="keywordflow">if</span> (<a class="code" href="group__Impedance.html#a5">Zimage</a> != 0.0)
00856               InducedKick(dipole_kick_x,dipole_current_x,Zimage,SP.<a class="code" href="structSynParticle.html#m2">beta0</a>,
00857                    SP.<a class="code" href="structSynParticle.html#m3">gamma0</a>*mp*SP.<a class="code" href="structSynParticle.html#m1">A</a>*pow(clight,2),SP.<a class="code" href="structSynParticle.html#m0">Z</a>*qe); 
00858        Pics.<a class="code" href="classPic.html#a57">impedance_kick</a>(dipole_kick_x,circum,ds); 
00859          }
00860     }
00861     
00862    <span class="comment">// charge density -&gt; electric fields:</span>
00863        
00864      <span class="keywordflow">if</span>( <a class="code" href="group__Other.html#a1">space_charge</a> == 1 )
00865      {
00866         <span class="comment">// PIC -&gt; charge density for Poisson solver:</span>
00867         <span class="keywordflow">if</span> (<a class="code" href="group__Other.html#a3">sliced</a> == 0)   {
00868           Pics.<a class="code" href="classPic.html#a69">gatherXY</a>(charge*qe/circum,rho_xy_tmp);           
00869           MPI_Allreduce(rho_xy_tmp.get_grid(),rho_xy.get_grid(),
00870                       <a class="code" href="group__Particles.html#a1">NX</a>*<a class="code" href="group__Particles.html#a2">NY</a>,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD); 
00871           <span class="comment">//Pics.gatherXY(charge*qe/slice_length,rho_xy);</span>
00872         }
00873         <span class="keywordflow">else</span>
00874           Pics.<a class="code" href="classPic.html#a70">gatherXYZ</a>(charge*qe/rho_xyz.get_dz(),rho_xyz);    
00875         <span class="comment">// Poisson solver</span>
00876         <span class="keywordflow">if</span> (<a class="code" href="group__Other.html#a3">sliced</a> == 0)
00877           poisson_xy(Ex,Ey,rho_xy);
00878         <span class="keywordflow">else</span> 
00879           poisson_xyz(Ex3,Ey3,rho_xyz);
00880      }   
00881      
00882    <span class="comment">// Shift xs and ys:</span>
00883         
00884       <span class="keywordflow">if</span>(<a class="code" href="group__Other.html#a1">space_charge</a>==1 &amp;&amp; ds &gt; 0.0) 
00885         {
00886           <span class="keywordflow">if</span> (<a class="code" href="group__Other.html#a3">sliced</a> == 0)
00887              Pics.<a class="code" href="classPic.html#a50">kick</a>(Ex,Ey,ds);
00888           <span class="keywordflow">else</span> 
00889              Pics.<a class="code" href="classPic.html#a50">kick</a>(Ex3,Ey3,ds);
00890         }
00891          
00892         
00893     <span class="comment">// linear sc kicks:</span>
00894    
00895       <span class="keywordflow">if</span>(<a class="code" href="group__Other.html#a1">space_charge</a> == 2  &amp;&amp;  ds &gt; 0.0)
00896              Pics.<a class="code" href="classPic.html#a58">linear_SC_kick</a>(dQxm,dQym,tunex,tuney,
00897                                  rho_z,current/(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight),
00898                                    dipole_current_x,dipole_current_y,
00899                                  circum,ds);
00900         
00901     <span class="comment">// nonlinear sc kicks:</span>
00902    
00903       <span class="keywordflow">if</span>(<a class="code" href="group__Other.html#a1">space_charge</a> == 3  &amp;&amp;  ds &gt; 0.0)
00904              Pics.<a class="code" href="classPic.html#a59">nonlinear_SC_kick</a>(sqrt(1.0e-6*twiss0.<a class="code" href="structTwissP.html#m0">betx</a>*rms_emittance_x0),
00905                                     sqrt(1.0e-6*twiss0.<a class="code" href="structTwissP.html#m1">bety</a>*rms_emittance_y0),
00906                                     dQxm,dQym,tunex,tuney,
00907                                     rho_z,current/(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight),
00908                                     circum,ds); 
00909      <span class="comment">// dipole kick (simple):</span>
00910    
00911       <span class="comment">/*if(space_charge == 2  &amp;&amp;  ds &gt; 0.0)</span>
00912 <span class="comment">             Pics.dipole_kick_simple(dQxm,dQym,tunex,tuney,</span>
00913 <span class="comment">                                 rho_z,current/(SP.beta0*clight),</span>
00914 <span class="comment">                                 dipole_current_x,dipole_current_y,</span>
00915 <span class="comment">                                 circum,ds); */</span>   
00916                                  
00917                                  
00918   <span class="comment">// dipole noise modulation kick:</span>
00919     
00920         <span class="keywordtype">double</span> dnoiseamp=1.0e-6;
00921     <span class="keywordtype">double</span> nus=fsyn/(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight/<a class="code" href="group__Lattice.html#a1">circum</a>);
00922     <span class="keywordflow">if</span> ( <a class="code" href="group__Diagnostics.html#a0">btf</a> == 1 )
00923         <span class="comment">//dtheta=Pics.dipole_mod_kick(s/(SP.beta0*clight),ds,circum,dnoiseamp,</span>
00924             <span class="comment">//0.95*(tunex-0.0)*SP.beta0*clight/circum,1.05*(tunex-0.0)*SP.beta0*clight/circum,</span>
00925             <span class="comment">//cells*cell_length/(SP.beta0*clight),btf_harmonic,&amp;dran); </span>
00926             dtheta=Pics.<a class="code" href="classPic.html#a61">dipole_mod_kick</a>(s/(SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight),ds,circum,dnoiseamp,
00927                     (tunex+nus)*SP.<a class="code" href="structSynParticle.html#m2">beta0</a>*clight/circum,btf_harmonic);   
00928                 
00929                                  
00930    <span class="comment">// correct for ibs: </span>
00931    
00932     <span class="comment">/*if( counter != 0 &amp;&amp; counter%Nibs == 0 ) </span>
00933 <span class="comment">     {</span>
00934 <span class="comment">      double rate_ibs=1.0e4;     </span>
00935 <span class="comment">      double Dz=rate_ibs*pow(Pics.rms_momentum_spread(),2);</span>
00936 <span class="comment">      double Dxy=rate_ibs*0.5*(Pics.rms_emittance_x()+Pics.rms_emittance_y());</span>
00937 <span class="comment">      double betx=lattice.get_element()-&gt;get_betx();</span>
00938 <span class="comment">      double bety=lattice.get_element()-&gt;get_bety();</span>
00939 <span class="comment">      Pics.langevin(rate_ibs,rate_ibs*0.0,Dxy,Dz*0.0,Nibs*ds,betx,bety,&amp;d);</span>
00940 <span class="comment">     }*/</span>
00941     
00942   
00943     <span class="comment">// For bunch compression: Update slice boundaries z1 and z2 from </span>
00944     <span class="comment">// new bunch boundaries zm1,zm2:</span>
00945       
00946     <span class="comment">/*if( counter != 0 &amp;&amp; counter%Nexchange == 0 ) </span>
00947 <span class="comment">    {</span>
00948 <span class="comment">      if(myid == 0)</span>
00949 <span class="comment">        zm1=Pics.z_min();</span>
00950 <span class="comment">      MPI_Bcast(&amp;zm1,1,MPI_DOUBLE,0,MPI_COMM_WORLD);        </span>
00951 <span class="comment">      if(myid == numprocs-1)</span>
00952 <span class="comment">        zm2=Pics.z_max();   </span>
00953 <span class="comment">      MPI_Bcast(&amp;zm2,1,MPI_DOUBLE,numprocs-1,MPI_COMM_WORLD); </span>
00954 <span class="comment">    </span>
00955 <span class="comment">      Pics.z1=zm1+myid*(zm2-zm1)/numprocs;</span>
00956 <span class="comment">      Pics.z2=Pics.z1+(zm2-zm1)/numprocs;    </span>
00957 <span class="comment">      slice_length=Pics.z2-Pics.z1;</span>
00958 <span class="comment">      </span>
00959 <span class="comment">      rho_xyz.get_zleft()=zm1;</span>
00960 <span class="comment">      rho_xyz.get_zright()=zm2;</span>
00961 <span class="comment">      Ex3.get_zleft()=zm1;</span>
00962 <span class="comment">      Ex3.get_zright()=zm2;</span>
00963 <span class="comment">      Ey3.get_zleft()=zm1;</span>
00964 <span class="comment">      Ey3.get_zright()=zm2;</span>
00965 <span class="comment">      </span>
00966 <span class="comment">    }*/</span>
00967       
00968    
00969     
00970    <span class="comment">// advance in beam line, go to next element:   </span>
00971 
00972      lattice.<a class="code" href="classBeamLine.html#a13">next_element</a>(); 
00973      counter++;
00974 
00975 
00976  } <span class="keywordflow">while</span>( counter != <a class="code" href="group__Simulation.html#a2">cells</a>*Nelements );
00977 
00978  <span class="comment">//------------------end of loop-------------------------------</span>
00979  
00980   <span class="comment">// close files:</span>
00981 
00982   fclose(out);
00983   
00984   <span class="comment">// MPI end:</span>
00985   
00986   MPI_Finalize(); 
00987 
00988   
00989 }
00990 
00991 
00992 
</pre></div><hr><address style="align: right;"><small>Generated on Wed Oct 14 14:27:07 2009 for Track by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 
width=110 height=53></a>1.3 </small></address>
</body>
</html>
